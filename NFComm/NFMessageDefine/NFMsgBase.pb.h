// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NFMsgBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NFMsgBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NFMsgBase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgBase_2eproto;
namespace NFMsg {
class Ident;
struct IdentDefaultTypeInternal;
extern IdentDefaultTypeInternal _Ident_default_instance_;
class MsgBase;
struct MsgBaseDefaultTypeInternal;
extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MultiObjectPropertyList;
struct MultiObjectPropertyListDefaultTypeInternal;
extern MultiObjectPropertyListDefaultTypeInternal _MultiObjectPropertyList_default_instance_;
class MultiObjectRecordList;
struct MultiObjectRecordListDefaultTypeInternal;
extern MultiObjectRecordListDefaultTypeInternal _MultiObjectRecordList_default_instance_;
class ObjectPropertyFloat;
struct ObjectPropertyFloatDefaultTypeInternal;
extern ObjectPropertyFloatDefaultTypeInternal _ObjectPropertyFloat_default_instance_;
class ObjectPropertyInt;
struct ObjectPropertyIntDefaultTypeInternal;
extern ObjectPropertyIntDefaultTypeInternal _ObjectPropertyInt_default_instance_;
class ObjectPropertyList;
struct ObjectPropertyListDefaultTypeInternal;
extern ObjectPropertyListDefaultTypeInternal _ObjectPropertyList_default_instance_;
class ObjectPropertyObject;
struct ObjectPropertyObjectDefaultTypeInternal;
extern ObjectPropertyObjectDefaultTypeInternal _ObjectPropertyObject_default_instance_;
class ObjectPropertyString;
struct ObjectPropertyStringDefaultTypeInternal;
extern ObjectPropertyStringDefaultTypeInternal _ObjectPropertyString_default_instance_;
class ObjectPropertyVector2;
struct ObjectPropertyVector2DefaultTypeInternal;
extern ObjectPropertyVector2DefaultTypeInternal _ObjectPropertyVector2_default_instance_;
class ObjectPropertyVector3;
struct ObjectPropertyVector3DefaultTypeInternal;
extern ObjectPropertyVector3DefaultTypeInternal _ObjectPropertyVector3_default_instance_;
class ObjectRecordAddRow;
struct ObjectRecordAddRowDefaultTypeInternal;
extern ObjectRecordAddRowDefaultTypeInternal _ObjectRecordAddRow_default_instance_;
class ObjectRecordBase;
struct ObjectRecordBaseDefaultTypeInternal;
extern ObjectRecordBaseDefaultTypeInternal _ObjectRecordBase_default_instance_;
class ObjectRecordFloat;
struct ObjectRecordFloatDefaultTypeInternal;
extern ObjectRecordFloatDefaultTypeInternal _ObjectRecordFloat_default_instance_;
class ObjectRecordInt;
struct ObjectRecordIntDefaultTypeInternal;
extern ObjectRecordIntDefaultTypeInternal _ObjectRecordInt_default_instance_;
class ObjectRecordList;
struct ObjectRecordListDefaultTypeInternal;
extern ObjectRecordListDefaultTypeInternal _ObjectRecordList_default_instance_;
class ObjectRecordObject;
struct ObjectRecordObjectDefaultTypeInternal;
extern ObjectRecordObjectDefaultTypeInternal _ObjectRecordObject_default_instance_;
class ObjectRecordRemove;
struct ObjectRecordRemoveDefaultTypeInternal;
extern ObjectRecordRemoveDefaultTypeInternal _ObjectRecordRemove_default_instance_;
class ObjectRecordString;
struct ObjectRecordStringDefaultTypeInternal;
extern ObjectRecordStringDefaultTypeInternal _ObjectRecordString_default_instance_;
class ObjectRecordSwap;
struct ObjectRecordSwapDefaultTypeInternal;
extern ObjectRecordSwapDefaultTypeInternal _ObjectRecordSwap_default_instance_;
class ObjectRecordVector2;
struct ObjectRecordVector2DefaultTypeInternal;
extern ObjectRecordVector2DefaultTypeInternal _ObjectRecordVector2_default_instance_;
class ObjectRecordVector3;
struct ObjectRecordVector3DefaultTypeInternal;
extern ObjectRecordVector3DefaultTypeInternal _ObjectRecordVector3_default_instance_;
class PropertyFloat;
struct PropertyFloatDefaultTypeInternal;
extern PropertyFloatDefaultTypeInternal _PropertyFloat_default_instance_;
class PropertyInt;
struct PropertyIntDefaultTypeInternal;
extern PropertyIntDefaultTypeInternal _PropertyInt_default_instance_;
class PropertyObject;
struct PropertyObjectDefaultTypeInternal;
extern PropertyObjectDefaultTypeInternal _PropertyObject_default_instance_;
class PropertyString;
struct PropertyStringDefaultTypeInternal;
extern PropertyStringDefaultTypeInternal _PropertyString_default_instance_;
class PropertyVector2;
struct PropertyVector2DefaultTypeInternal;
extern PropertyVector2DefaultTypeInternal _PropertyVector2_default_instance_;
class PropertyVector3;
struct PropertyVector3DefaultTypeInternal;
extern PropertyVector3DefaultTypeInternal _PropertyVector3_default_instance_;
class RecordAddRowStruct;
struct RecordAddRowStructDefaultTypeInternal;
extern RecordAddRowStructDefaultTypeInternal _RecordAddRowStruct_default_instance_;
class RecordFloat;
struct RecordFloatDefaultTypeInternal;
extern RecordFloatDefaultTypeInternal _RecordFloat_default_instance_;
class RecordInt;
struct RecordIntDefaultTypeInternal;
extern RecordIntDefaultTypeInternal _RecordInt_default_instance_;
class RecordObject;
struct RecordObjectDefaultTypeInternal;
extern RecordObjectDefaultTypeInternal _RecordObject_default_instance_;
class RecordString;
struct RecordStringDefaultTypeInternal;
extern RecordStringDefaultTypeInternal _RecordString_default_instance_;
class RecordVector2;
struct RecordVector2DefaultTypeInternal;
extern RecordVector2DefaultTypeInternal _RecordVector2_default_instance_;
class RecordVector3;
struct RecordVector3DefaultTypeInternal;
extern RecordVector3DefaultTypeInternal _RecordVector3_default_instance_;
class ReqAckLagTest;
struct ReqAckLagTestDefaultTypeInternal;
extern ReqAckLagTestDefaultTypeInternal _ReqAckLagTest_default_instance_;
class ReqCommand;
struct ReqCommandDefaultTypeInternal;
extern ReqCommandDefaultTypeInternal _ReqCommand_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::NFMsg::Ident* Arena::CreateMaybeMessage<::NFMsg::Ident>(Arena*);
template<> ::NFMsg::MsgBase* Arena::CreateMaybeMessage<::NFMsg::MsgBase>(Arena*);
template<> ::NFMsg::MultiObjectPropertyList* Arena::CreateMaybeMessage<::NFMsg::MultiObjectPropertyList>(Arena*);
template<> ::NFMsg::MultiObjectRecordList* Arena::CreateMaybeMessage<::NFMsg::MultiObjectRecordList>(Arena*);
template<> ::NFMsg::ObjectPropertyFloat* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyFloat>(Arena*);
template<> ::NFMsg::ObjectPropertyInt* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyInt>(Arena*);
template<> ::NFMsg::ObjectPropertyList* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyList>(Arena*);
template<> ::NFMsg::ObjectPropertyObject* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyObject>(Arena*);
template<> ::NFMsg::ObjectPropertyString* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyString>(Arena*);
template<> ::NFMsg::ObjectPropertyVector2* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyVector2>(Arena*);
template<> ::NFMsg::ObjectPropertyVector3* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyVector3>(Arena*);
template<> ::NFMsg::ObjectRecordAddRow* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordAddRow>(Arena*);
template<> ::NFMsg::ObjectRecordBase* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordBase>(Arena*);
template<> ::NFMsg::ObjectRecordFloat* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordFloat>(Arena*);
template<> ::NFMsg::ObjectRecordInt* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordInt>(Arena*);
template<> ::NFMsg::ObjectRecordList* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordList>(Arena*);
template<> ::NFMsg::ObjectRecordObject* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordObject>(Arena*);
template<> ::NFMsg::ObjectRecordRemove* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordRemove>(Arena*);
template<> ::NFMsg::ObjectRecordString* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordString>(Arena*);
template<> ::NFMsg::ObjectRecordSwap* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordSwap>(Arena*);
template<> ::NFMsg::ObjectRecordVector2* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordVector2>(Arena*);
template<> ::NFMsg::ObjectRecordVector3* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordVector3>(Arena*);
template<> ::NFMsg::PropertyFloat* Arena::CreateMaybeMessage<::NFMsg::PropertyFloat>(Arena*);
template<> ::NFMsg::PropertyInt* Arena::CreateMaybeMessage<::NFMsg::PropertyInt>(Arena*);
template<> ::NFMsg::PropertyObject* Arena::CreateMaybeMessage<::NFMsg::PropertyObject>(Arena*);
template<> ::NFMsg::PropertyString* Arena::CreateMaybeMessage<::NFMsg::PropertyString>(Arena*);
template<> ::NFMsg::PropertyVector2* Arena::CreateMaybeMessage<::NFMsg::PropertyVector2>(Arena*);
template<> ::NFMsg::PropertyVector3* Arena::CreateMaybeMessage<::NFMsg::PropertyVector3>(Arena*);
template<> ::NFMsg::RecordAddRowStruct* Arena::CreateMaybeMessage<::NFMsg::RecordAddRowStruct>(Arena*);
template<> ::NFMsg::RecordFloat* Arena::CreateMaybeMessage<::NFMsg::RecordFloat>(Arena*);
template<> ::NFMsg::RecordInt* Arena::CreateMaybeMessage<::NFMsg::RecordInt>(Arena*);
template<> ::NFMsg::RecordObject* Arena::CreateMaybeMessage<::NFMsg::RecordObject>(Arena*);
template<> ::NFMsg::RecordString* Arena::CreateMaybeMessage<::NFMsg::RecordString>(Arena*);
template<> ::NFMsg::RecordVector2* Arena::CreateMaybeMessage<::NFMsg::RecordVector2>(Arena*);
template<> ::NFMsg::RecordVector3* Arena::CreateMaybeMessage<::NFMsg::RecordVector3>(Arena*);
template<> ::NFMsg::ReqAckLagTest* Arena::CreateMaybeMessage<::NFMsg::ReqAckLagTest>(Arena*);
template<> ::NFMsg::ReqCommand* Arena::CreateMaybeMessage<::NFMsg::ReqCommand>(Arena*);
template<> ::NFMsg::Vector2* Arena::CreateMaybeMessage<::NFMsg::Vector2>(Arena*);
template<> ::NFMsg::Vector3* Arena::CreateMaybeMessage<::NFMsg::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFMsg {

enum ReqCommand_EGameCommandType : int {
  ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY = 0,
  ReqCommand_EGameCommandType_EGCT_MODIY_ITEM = 1,
  ReqCommand_EGameCommandType_EGCT_CREATE_OBJECT = 2,
  ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP = 3,
  ReqCommand_EGameCommandType_ReqCommand_EGameCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReqCommand_EGameCommandType_ReqCommand_EGameCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReqCommand_EGameCommandType_IsValid(int value);
constexpr ReqCommand_EGameCommandType ReqCommand_EGameCommandType_EGameCommandType_MIN = ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY;
constexpr ReqCommand_EGameCommandType ReqCommand_EGameCommandType_EGameCommandType_MAX = ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP;
constexpr int ReqCommand_EGameCommandType_EGameCommandType_ARRAYSIZE = ReqCommand_EGameCommandType_EGameCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqCommand_EGameCommandType_descriptor();
template<typename T>
inline const std::string& ReqCommand_EGameCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqCommand_EGameCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqCommand_EGameCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqCommand_EGameCommandType_descriptor(), enum_t_value);
}
inline bool ReqCommand_EGameCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqCommand_EGameCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqCommand_EGameCommandType>(
    ReqCommand_EGameCommandType_descriptor(), name, value);
}
// ===================================================================

class Ident final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.Ident) */ {
 public:
  inline Ident() : Ident(nullptr) {}
  ~Ident() override;
  explicit PROTOBUF_CONSTEXPR Ident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ident(const Ident& from);
  Ident(Ident&& from) noexcept
    : Ident() {
    *this = ::std::move(from);
  }

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ident& operator=(Ident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ident& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ident* internal_default_instance() {
    return reinterpret_cast<const Ident*>(
               &_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ident& a, Ident& b) {
    a.Swap(&b);
  }
  inline void Swap(Ident* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ident>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ident& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ident& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ident* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.Ident";
  }
  protected:
  explicit Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvridFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // int64 svrid = 1;
  void clear_svrid();
  int64_t svrid() const;
  void set_svrid(int64_t value);
  private:
  int64_t _internal_svrid() const;
  void _internal_set_svrid(int64_t value);
  public:

  // int64 index = 2;
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.Ident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t svrid_;
  int64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit PROTOBUF_CONSTEXPR Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyInt) */ {
 public:
  inline PropertyInt() : PropertyInt(nullptr) {}
  ~PropertyInt() override;
  explicit PROTOBUF_CONSTEXPR PropertyInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyInt(const PropertyInt& from);
  PropertyInt(PropertyInt&& from) noexcept
    : PropertyInt() {
    *this = ::std::move(from);
  }

  inline PropertyInt& operator=(const PropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyInt& operator=(PropertyInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyInt* internal_default_instance() {
    return reinterpret_cast<const PropertyInt*>(
               &_PropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyInt& a, PropertyInt& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyInt";
  }
  protected:
  explicit PropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // int64 data = 2;
  void clear_data();
  int64_t data() const;
  void set_data(int64_t value);
  private:
  int64_t _internal_data() const;
  void _internal_set_data(int64_t value);
  public:

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  int64_t data_;
  int64_t reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyFloat) */ {
 public:
  inline PropertyFloat() : PropertyFloat(nullptr) {}
  ~PropertyFloat() override;
  explicit PROTOBUF_CONSTEXPR PropertyFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyFloat(const PropertyFloat& from);
  PropertyFloat(PropertyFloat&& from) noexcept
    : PropertyFloat() {
    *this = ::std::move(from);
  }

  inline PropertyFloat& operator=(const PropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyFloat& operator=(PropertyFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyFloat* internal_default_instance() {
    return reinterpret_cast<const PropertyFloat*>(
               &_PropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PropertyFloat& a, PropertyFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyFloat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyFloat";
  }
  protected:
  explicit PropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kReasonFieldNumber = 3,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // float data = 2;
  void clear_data();
  float data() const;
  void set_data(float value);
  private:
  float _internal_data() const;
  void _internal_set_data(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  int64_t reason_;
  float data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyString) */ {
 public:
  inline PropertyString() : PropertyString(nullptr) {}
  ~PropertyString() override;
  explicit PROTOBUF_CONSTEXPR PropertyString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyString(const PropertyString& from);
  PropertyString(PropertyString&& from) noexcept
    : PropertyString() {
    *this = ::std::move(from);
  }

  inline PropertyString& operator=(const PropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyString& operator=(PropertyString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyString& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyString* internal_default_instance() {
    return reinterpret_cast<const PropertyString*>(
               &_PropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropertyString& a, PropertyString& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyString";
  }
  protected:
  explicit PropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyObject) */ {
 public:
  inline PropertyObject() : PropertyObject(nullptr) {}
  ~PropertyObject() override;
  explicit PROTOBUF_CONSTEXPR PropertyObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyObject(const PropertyObject& from);
  PropertyObject(PropertyObject&& from) noexcept
    : PropertyObject() {
    *this = ::std::move(from);
  }

  inline PropertyObject& operator=(const PropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyObject& operator=(PropertyObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyObject* internal_default_instance() {
    return reinterpret_cast<const PropertyObject*>(
               &_PropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PropertyObject& a, PropertyObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyObject";
  }
  protected:
  explicit PropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .NFMsg.Ident data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Ident& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_data();
  ::NFMsg::Ident* mutable_data();
  void set_allocated_data(::NFMsg::Ident* data);
  private:
  const ::NFMsg::Ident& _internal_data() const;
  ::NFMsg::Ident* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Ident* data);
  ::NFMsg::Ident* unsafe_arena_release_data();

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::NFMsg::Ident* data_;
  int64_t reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyVector2) */ {
 public:
  inline PropertyVector2() : PropertyVector2(nullptr) {}
  ~PropertyVector2() override;
  explicit PROTOBUF_CONSTEXPR PropertyVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyVector2(const PropertyVector2& from);
  PropertyVector2(PropertyVector2&& from) noexcept
    : PropertyVector2() {
    *this = ::std::move(from);
  }

  inline PropertyVector2& operator=(const PropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyVector2& operator=(PropertyVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyVector2* internal_default_instance() {
    return reinterpret_cast<const PropertyVector2*>(
               &_PropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PropertyVector2& a, PropertyVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyVector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyVector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyVector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyVector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyVector2";
  }
  protected:
  explicit PropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .NFMsg.Vector2 data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Vector2& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector2* release_data();
  ::NFMsg::Vector2* mutable_data();
  void set_allocated_data(::NFMsg::Vector2* data);
  private:
  const ::NFMsg::Vector2& _internal_data() const;
  ::NFMsg::Vector2* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Vector2* data);
  ::NFMsg::Vector2* unsafe_arena_release_data();

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::NFMsg::Vector2* data_;
  int64_t reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class PropertyVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyVector3) */ {
 public:
  inline PropertyVector3() : PropertyVector3(nullptr) {}
  ~PropertyVector3() override;
  explicit PROTOBUF_CONSTEXPR PropertyVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyVector3(const PropertyVector3& from);
  PropertyVector3(PropertyVector3&& from) noexcept
    : PropertyVector3() {
    *this = ::std::move(from);
  }

  inline PropertyVector3& operator=(const PropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyVector3& operator=(PropertyVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyVector3* internal_default_instance() {
    return reinterpret_cast<const PropertyVector3*>(
               &_PropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PropertyVector3& a, PropertyVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyVector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyVector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyVector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertyVector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PropertyVector3";
  }
  protected:
  explicit PropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .NFMsg.Vector3 data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Vector3& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector3* release_data();
  ::NFMsg::Vector3* mutable_data();
  void set_allocated_data(::NFMsg::Vector3* data);
  private:
  const ::NFMsg::Vector3& _internal_data() const;
  ::NFMsg::Vector3* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Vector3* data);
  ::NFMsg::Vector3* unsafe_arena_release_data();

  // int64 reason = 3;
  void clear_reason();
  int64_t reason() const;
  void set_reason(int64_t value);
  private:
  int64_t _internal_reason() const;
  void _internal_set_reason(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::NFMsg::Vector3* data_;
  int64_t reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordInt) */ {
 public:
  inline RecordInt() : RecordInt(nullptr) {}
  ~RecordInt() override;
  explicit PROTOBUF_CONSTEXPR RecordInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordInt(const RecordInt& from);
  RecordInt(RecordInt&& from) noexcept
    : RecordInt() {
    *this = ::std::move(from);
  }

  inline RecordInt& operator=(const RecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordInt& operator=(RecordInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordInt* internal_default_instance() {
    return reinterpret_cast<const RecordInt*>(
               &_RecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecordInt& a, RecordInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordInt";
  }
  protected:
  explicit RecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // int64 data = 3;
  void clear_data();
  int64_t data() const;
  void set_data(int64_t value);
  private:
  int64_t _internal_data() const;
  void _internal_set_data(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t row_;
  int32_t col_;
  int64_t data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordFloat) */ {
 public:
  inline RecordFloat() : RecordFloat(nullptr) {}
  ~RecordFloat() override;
  explicit PROTOBUF_CONSTEXPR RecordFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFloat(const RecordFloat& from);
  RecordFloat(RecordFloat&& from) noexcept
    : RecordFloat() {
    *this = ::std::move(from);
  }

  inline RecordFloat& operator=(const RecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFloat& operator=(RecordFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordFloat* internal_default_instance() {
    return reinterpret_cast<const RecordFloat*>(
               &_RecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecordFloat& a, RecordFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordFloat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordFloat";
  }
  protected:
  explicit RecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // float data = 3;
  void clear_data();
  float data() const;
  void set_data(float value);
  private:
  float _internal_data() const;
  void _internal_set_data(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t row_;
  int32_t col_;
  float data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordString) */ {
 public:
  inline RecordString() : RecordString(nullptr) {}
  ~RecordString() override;
  explicit PROTOBUF_CONSTEXPR RecordString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordString(const RecordString& from);
  RecordString(RecordString&& from) noexcept
    : RecordString() {
    *this = ::std::move(from);
  }

  inline RecordString& operator=(const RecordString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordString& operator=(RecordString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordString& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordString* internal_default_instance() {
    return reinterpret_cast<const RecordString*>(
               &_RecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecordString& a, RecordString& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordString";
  }
  protected:
  explicit RecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t row_;
  int32_t col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordObject) */ {
 public:
  inline RecordObject() : RecordObject(nullptr) {}
  ~RecordObject() override;
  explicit PROTOBUF_CONSTEXPR RecordObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordObject(const RecordObject& from);
  RecordObject(RecordObject&& from) noexcept
    : RecordObject() {
    *this = ::std::move(from);
  }

  inline RecordObject& operator=(const RecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordObject& operator=(RecordObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordObject* internal_default_instance() {
    return reinterpret_cast<const RecordObject*>(
               &_RecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecordObject& a, RecordObject& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordObject";
  }
  protected:
  explicit RecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .NFMsg.Ident data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Ident& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_data();
  ::NFMsg::Ident* mutable_data();
  void set_allocated_data(::NFMsg::Ident* data);
  private:
  const ::NFMsg::Ident& _internal_data() const;
  ::NFMsg::Ident* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Ident* data);
  ::NFMsg::Ident* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NFMsg::Ident* data_;
  int32_t row_;
  int32_t col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordVector2) */ {
 public:
  inline RecordVector2() : RecordVector2(nullptr) {}
  ~RecordVector2() override;
  explicit PROTOBUF_CONSTEXPR RecordVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordVector2(const RecordVector2& from);
  RecordVector2(RecordVector2&& from) noexcept
    : RecordVector2() {
    *this = ::std::move(from);
  }

  inline RecordVector2& operator=(const RecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordVector2& operator=(RecordVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordVector2* internal_default_instance() {
    return reinterpret_cast<const RecordVector2*>(
               &_RecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RecordVector2& a, RecordVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordVector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordVector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordVector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordVector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordVector2";
  }
  protected:
  explicit RecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .NFMsg.Vector2 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Vector2& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector2* release_data();
  ::NFMsg::Vector2* mutable_data();
  void set_allocated_data(::NFMsg::Vector2* data);
  private:
  const ::NFMsg::Vector2& _internal_data() const;
  ::NFMsg::Vector2* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Vector2* data);
  ::NFMsg::Vector2* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NFMsg::Vector2* data_;
  int32_t row_;
  int32_t col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordVector3) */ {
 public:
  inline RecordVector3() : RecordVector3(nullptr) {}
  ~RecordVector3() override;
  explicit PROTOBUF_CONSTEXPR RecordVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordVector3(const RecordVector3& from);
  RecordVector3(RecordVector3&& from) noexcept
    : RecordVector3() {
    *this = ::std::move(from);
  }

  inline RecordVector3& operator=(const RecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordVector3& operator=(RecordVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordVector3* internal_default_instance() {
    return reinterpret_cast<const RecordVector3*>(
               &_RecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecordVector3& a, RecordVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordVector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordVector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordVector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordVector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordVector3";
  }
  protected:
  explicit RecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .NFMsg.Vector3 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::NFMsg::Vector3& data() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector3* release_data();
  ::NFMsg::Vector3* mutable_data();
  void set_allocated_data(::NFMsg::Vector3* data);
  private:
  const ::NFMsg::Vector3& _internal_data() const;
  ::NFMsg::Vector3* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::NFMsg::Vector3* data);
  ::NFMsg::Vector3* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 2;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NFMsg::Vector3* data_;
  int32_t row_;
  int32_t col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class RecordAddRowStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordAddRowStruct) */ {
 public:
  inline RecordAddRowStruct() : RecordAddRowStruct(nullptr) {}
  ~RecordAddRowStruct() override;
  explicit PROTOBUF_CONSTEXPR RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordAddRowStruct(const RecordAddRowStruct& from);
  RecordAddRowStruct(RecordAddRowStruct&& from) noexcept
    : RecordAddRowStruct() {
    *this = ::std::move(from);
  }

  inline RecordAddRowStruct& operator=(const RecordAddRowStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordAddRowStruct& operator=(RecordAddRowStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordAddRowStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordAddRowStruct* internal_default_instance() {
    return reinterpret_cast<const RecordAddRowStruct*>(
               &_RecordAddRowStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RecordAddRowStruct& a, RecordAddRowStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordAddRowStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordAddRowStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordAddRowStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordAddRowStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordAddRowStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordAddRowStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordAddRowStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.RecordAddRowStruct";
  }
  protected:
  explicit RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIntListFieldNumber = 2,
    kRecordFloatListFieldNumber = 3,
    kRecordStringListFieldNumber = 4,
    kRecordObjectListFieldNumber = 5,
    kRecordVector2ListFieldNumber = 6,
    kRecordVector3ListFieldNumber = 7,
    kRowFieldNumber = 1,
  };
  // repeated .NFMsg.RecordInt record_int_list = 2;
  int record_int_list_size() const;
  private:
  int _internal_record_int_list_size() const;
  public:
  void clear_record_int_list();
  ::NFMsg::RecordInt* mutable_record_int_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >*
      mutable_record_int_list();
  private:
  const ::NFMsg::RecordInt& _internal_record_int_list(int index) const;
  ::NFMsg::RecordInt* _internal_add_record_int_list();
  public:
  const ::NFMsg::RecordInt& record_int_list(int index) const;
  ::NFMsg::RecordInt* add_record_int_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >&
      record_int_list() const;

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  int record_float_list_size() const;
  private:
  int _internal_record_float_list_size() const;
  public:
  void clear_record_float_list();
  ::NFMsg::RecordFloat* mutable_record_float_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >*
      mutable_record_float_list();
  private:
  const ::NFMsg::RecordFloat& _internal_record_float_list(int index) const;
  ::NFMsg::RecordFloat* _internal_add_record_float_list();
  public:
  const ::NFMsg::RecordFloat& record_float_list(int index) const;
  ::NFMsg::RecordFloat* add_record_float_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >&
      record_float_list() const;

  // repeated .NFMsg.RecordString record_string_list = 4;
  int record_string_list_size() const;
  private:
  int _internal_record_string_list_size() const;
  public:
  void clear_record_string_list();
  ::NFMsg::RecordString* mutable_record_string_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >*
      mutable_record_string_list();
  private:
  const ::NFMsg::RecordString& _internal_record_string_list(int index) const;
  ::NFMsg::RecordString* _internal_add_record_string_list();
  public:
  const ::NFMsg::RecordString& record_string_list(int index) const;
  ::NFMsg::RecordString* add_record_string_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >&
      record_string_list() const;

  // repeated .NFMsg.RecordObject record_object_list = 5;
  int record_object_list_size() const;
  private:
  int _internal_record_object_list_size() const;
  public:
  void clear_record_object_list();
  ::NFMsg::RecordObject* mutable_record_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >*
      mutable_record_object_list();
  private:
  const ::NFMsg::RecordObject& _internal_record_object_list(int index) const;
  ::NFMsg::RecordObject* _internal_add_record_object_list();
  public:
  const ::NFMsg::RecordObject& record_object_list(int index) const;
  ::NFMsg::RecordObject* add_record_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >&
      record_object_list() const;

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  int record_vector2_list_size() const;
  private:
  int _internal_record_vector2_list_size() const;
  public:
  void clear_record_vector2_list();
  ::NFMsg::RecordVector2* mutable_record_vector2_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >*
      mutable_record_vector2_list();
  private:
  const ::NFMsg::RecordVector2& _internal_record_vector2_list(int index) const;
  ::NFMsg::RecordVector2* _internal_add_record_vector2_list();
  public:
  const ::NFMsg::RecordVector2& record_vector2_list(int index) const;
  ::NFMsg::RecordVector2* add_record_vector2_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >&
      record_vector2_list() const;

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  int record_vector3_list_size() const;
  private:
  int _internal_record_vector3_list_size() const;
  public:
  void clear_record_vector3_list();
  ::NFMsg::RecordVector3* mutable_record_vector3_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >*
      mutable_record_vector3_list();
  private:
  const ::NFMsg::RecordVector3& _internal_record_vector3_list(int index) const;
  ::NFMsg::RecordVector3* _internal_add_record_vector3_list();
  public:
  const ::NFMsg::RecordVector3& record_vector3_list(int index) const;
  ::NFMsg::RecordVector3* add_record_vector3_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >&
      record_vector3_list() const;

  // int32 row = 1;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.RecordAddRowStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt > record_int_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat > record_float_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString > record_string_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject > record_object_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 > record_vector2_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 > record_vector3_list_;
  int32_t row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordBase) */ {
 public:
  inline ObjectRecordBase() : ObjectRecordBase(nullptr) {}
  ~ObjectRecordBase() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordBase(const ObjectRecordBase& from);
  ObjectRecordBase(ObjectRecordBase&& from) noexcept
    : ObjectRecordBase() {
    *this = ::std::move(from);
  }

  inline ObjectRecordBase& operator=(const ObjectRecordBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordBase& operator=(ObjectRecordBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordBase* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordBase*>(
               &_ObjectRecordBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ObjectRecordBase& a, ObjectRecordBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordBase";
  }
  protected:
  explicit ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowStructFieldNumber = 2,
    kRecordNameFieldNumber = 1,
  };
  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  int row_struct_size() const;
  private:
  int _internal_row_struct_size() const;
  public:
  void clear_row_struct();
  ::NFMsg::RecordAddRowStruct* mutable_row_struct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
      mutable_row_struct();
  private:
  const ::NFMsg::RecordAddRowStruct& _internal_row_struct(int index) const;
  ::NFMsg::RecordAddRowStruct* _internal_add_row_struct();
  public:
  const ::NFMsg::RecordAddRowStruct& row_struct(int index) const;
  ::NFMsg::RecordAddRowStruct* add_row_struct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
      row_struct() const;

  // bytes record_name = 1;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct > row_struct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyInt) */ {
 public:
  inline ObjectPropertyInt() : ObjectPropertyInt(nullptr) {}
  ~ObjectPropertyInt() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyInt(const ObjectPropertyInt& from);
  ObjectPropertyInt(ObjectPropertyInt&& from) noexcept
    : ObjectPropertyInt() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyInt& operator=(const ObjectPropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyInt& operator=(ObjectPropertyInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyInt* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyInt*>(
               &_ObjectPropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjectPropertyInt& a, ObjectPropertyInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyInt";
  }
  protected:
  explicit ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyInt property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyInt* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyInt& _internal_property_list(int index) const;
  ::NFMsg::PropertyInt* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyInt& property_list(int index) const;
  ::NFMsg::PropertyInt* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyFloat) */ {
 public:
  inline ObjectPropertyFloat() : ObjectPropertyFloat(nullptr) {}
  ~ObjectPropertyFloat() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyFloat(const ObjectPropertyFloat& from);
  ObjectPropertyFloat(ObjectPropertyFloat&& from) noexcept
    : ObjectPropertyFloat() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyFloat& operator=(const ObjectPropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyFloat& operator=(ObjectPropertyFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyFloat*>(
               &_ObjectPropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ObjectPropertyFloat& a, ObjectPropertyFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyFloat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyFloat";
  }
  protected:
  explicit ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyFloat property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyFloat* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyFloat& _internal_property_list(int index) const;
  ::NFMsg::PropertyFloat* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyFloat& property_list(int index) const;
  ::NFMsg::PropertyFloat* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyString) */ {
 public:
  inline ObjectPropertyString() : ObjectPropertyString(nullptr) {}
  ~ObjectPropertyString() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyString(const ObjectPropertyString& from);
  ObjectPropertyString(ObjectPropertyString&& from) noexcept
    : ObjectPropertyString() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyString& operator=(const ObjectPropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyString& operator=(ObjectPropertyString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyString* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyString*>(
               &_ObjectPropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ObjectPropertyString& a, ObjectPropertyString& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyString";
  }
  protected:
  explicit ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyString property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyString* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyString& _internal_property_list(int index) const;
  ::NFMsg::PropertyString* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyString& property_list(int index) const;
  ::NFMsg::PropertyString* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyObject) */ {
 public:
  inline ObjectPropertyObject() : ObjectPropertyObject(nullptr) {}
  ~ObjectPropertyObject() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyObject(const ObjectPropertyObject& from);
  ObjectPropertyObject(ObjectPropertyObject&& from) noexcept
    : ObjectPropertyObject() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyObject& operator=(const ObjectPropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyObject& operator=(ObjectPropertyObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyObject* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyObject*>(
               &_ObjectPropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ObjectPropertyObject& a, ObjectPropertyObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyObject";
  }
  protected:
  explicit ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyObject property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyObject* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyObject& _internal_property_list(int index) const;
  ::NFMsg::PropertyObject* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyObject& property_list(int index) const;
  ::NFMsg::PropertyObject* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyVector2) */ {
 public:
  inline ObjectPropertyVector2() : ObjectPropertyVector2(nullptr) {}
  ~ObjectPropertyVector2() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyVector2(const ObjectPropertyVector2& from);
  ObjectPropertyVector2(ObjectPropertyVector2&& from) noexcept
    : ObjectPropertyVector2() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector2& operator=(const ObjectPropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyVector2& operator=(ObjectPropertyVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector2*>(
               &_ObjectPropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ObjectPropertyVector2& a, ObjectPropertyVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyVector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyVector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyVector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyVector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyVector2";
  }
  protected:
  explicit ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyVector2 property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyVector2* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyVector2& _internal_property_list(int index) const;
  ::NFMsg::PropertyVector2* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyVector2& property_list(int index) const;
  ::NFMsg::PropertyVector2* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyVector3) */ {
 public:
  inline ObjectPropertyVector3() : ObjectPropertyVector3(nullptr) {}
  ~ObjectPropertyVector3() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyVector3(const ObjectPropertyVector3& from);
  ObjectPropertyVector3(ObjectPropertyVector3&& from) noexcept
    : ObjectPropertyVector3() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector3& operator=(const ObjectPropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyVector3& operator=(ObjectPropertyVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector3*>(
               &_ObjectPropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ObjectPropertyVector3& a, ObjectPropertyVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyVector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyVector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyVector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyVector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyVector3";
  }
  protected:
  explicit ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyVector3 property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::PropertyVector3* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
      mutable_property_list();
  private:
  const ::NFMsg::PropertyVector3& _internal_property_list(int index) const;
  ::NFMsg::PropertyVector3* _internal_add_property_list();
  public:
  const ::NFMsg::PropertyVector3& property_list(int index) const;
  ::NFMsg::PropertyVector3* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordInt) */ {
 public:
  inline ObjectRecordInt() : ObjectRecordInt(nullptr) {}
  ~ObjectRecordInt() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordInt(const ObjectRecordInt& from);
  ObjectRecordInt(ObjectRecordInt&& from) noexcept
    : ObjectRecordInt() {
    *this = ::std::move(from);
  }

  inline ObjectRecordInt& operator=(const ObjectRecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordInt& operator=(ObjectRecordInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordInt* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordInt*>(
               &_ObjectRecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ObjectRecordInt& a, ObjectRecordInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordInt";
  }
  protected:
  explicit ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordInt property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordInt* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordInt& _internal_property_list(int index) const;
  ::NFMsg::RecordInt* _internal_add_property_list();
  public:
  const ::NFMsg::RecordInt& property_list(int index) const;
  ::NFMsg::RecordInt* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordFloat) */ {
 public:
  inline ObjectRecordFloat() : ObjectRecordFloat(nullptr) {}
  ~ObjectRecordFloat() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordFloat(const ObjectRecordFloat& from);
  ObjectRecordFloat(ObjectRecordFloat&& from) noexcept
    : ObjectRecordFloat() {
    *this = ::std::move(from);
  }

  inline ObjectRecordFloat& operator=(const ObjectRecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordFloat& operator=(ObjectRecordFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordFloat*>(
               &_ObjectRecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ObjectRecordFloat& a, ObjectRecordFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordFloat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordFloat";
  }
  protected:
  explicit ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordFloat property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordFloat* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordFloat& _internal_property_list(int index) const;
  ::NFMsg::RecordFloat* _internal_add_property_list();
  public:
  const ::NFMsg::RecordFloat& property_list(int index) const;
  ::NFMsg::RecordFloat* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordString) */ {
 public:
  inline ObjectRecordString() : ObjectRecordString(nullptr) {}
  ~ObjectRecordString() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordString(const ObjectRecordString& from);
  ObjectRecordString(ObjectRecordString&& from) noexcept
    : ObjectRecordString() {
    *this = ::std::move(from);
  }

  inline ObjectRecordString& operator=(const ObjectRecordString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordString& operator=(ObjectRecordString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordString* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordString*>(
               &_ObjectRecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ObjectRecordString& a, ObjectRecordString& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordString";
  }
  protected:
  explicit ObjectRecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordString property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordString* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordString& _internal_property_list(int index) const;
  ::NFMsg::RecordString* _internal_add_property_list();
  public:
  const ::NFMsg::RecordString& property_list(int index) const;
  ::NFMsg::RecordString* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordObject) */ {
 public:
  inline ObjectRecordObject() : ObjectRecordObject(nullptr) {}
  ~ObjectRecordObject() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordObject(const ObjectRecordObject& from);
  ObjectRecordObject(ObjectRecordObject&& from) noexcept
    : ObjectRecordObject() {
    *this = ::std::move(from);
  }

  inline ObjectRecordObject& operator=(const ObjectRecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordObject& operator=(ObjectRecordObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordObject* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordObject*>(
               &_ObjectRecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ObjectRecordObject& a, ObjectRecordObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordObject";
  }
  protected:
  explicit ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordObject property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordObject* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordObject& _internal_property_list(int index) const;
  ::NFMsg::RecordObject* _internal_add_property_list();
  public:
  const ::NFMsg::RecordObject& property_list(int index) const;
  ::NFMsg::RecordObject* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordVector2) */ {
 public:
  inline ObjectRecordVector2() : ObjectRecordVector2(nullptr) {}
  ~ObjectRecordVector2() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordVector2(const ObjectRecordVector2& from);
  ObjectRecordVector2(ObjectRecordVector2&& from) noexcept
    : ObjectRecordVector2() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector2& operator=(const ObjectRecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordVector2& operator=(ObjectRecordVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector2*>(
               &_ObjectRecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ObjectRecordVector2& a, ObjectRecordVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordVector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordVector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordVector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordVector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordVector2";
  }
  protected:
  explicit ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordVector2 property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordVector2* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordVector2& _internal_property_list(int index) const;
  ::NFMsg::RecordVector2* _internal_add_property_list();
  public:
  const ::NFMsg::RecordVector2& property_list(int index) const;
  ::NFMsg::RecordVector2* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordVector3) */ {
 public:
  inline ObjectRecordVector3() : ObjectRecordVector3(nullptr) {}
  ~ObjectRecordVector3() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordVector3(const ObjectRecordVector3& from);
  ObjectRecordVector3(ObjectRecordVector3&& from) noexcept
    : ObjectRecordVector3() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector3& operator=(const ObjectRecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordVector3& operator=(ObjectRecordVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector3*>(
               &_ObjectRecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ObjectRecordVector3& a, ObjectRecordVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordVector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordVector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordVector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordVector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordVector3";
  }
  protected:
  explicit ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordVector3 property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::NFMsg::RecordVector3* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >*
      mutable_property_list();
  private:
  const ::NFMsg::RecordVector3& _internal_property_list(int index) const;
  ::NFMsg::RecordVector3* _internal_add_property_list();
  public:
  const ::NFMsg::RecordVector3& property_list(int index) const;
  ::NFMsg::RecordVector3* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordSwap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordSwap) */ {
 public:
  inline ObjectRecordSwap() : ObjectRecordSwap(nullptr) {}
  ~ObjectRecordSwap() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordSwap(const ObjectRecordSwap& from);
  ObjectRecordSwap(ObjectRecordSwap&& from) noexcept
    : ObjectRecordSwap() {
    *this = ::std::move(from);
  }

  inline ObjectRecordSwap& operator=(const ObjectRecordSwap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordSwap& operator=(ObjectRecordSwap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordSwap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordSwap* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordSwap*>(
               &_ObjectRecordSwap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ObjectRecordSwap& a, ObjectRecordSwap& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordSwap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordSwap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordSwap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordSwap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordSwap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordSwap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordSwap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordSwap";
  }
  protected:
  explicit ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginRecordNameFieldNumber = 2,
    kTargetRecordNameFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kRowOriginFieldNumber = 4,
    kRowTargetFieldNumber = 5,
  };
  // bytes origin_record_name = 2;
  void clear_origin_record_name();
  const std::string& origin_record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin_record_name();
  PROTOBUF_NODISCARD std::string* release_origin_record_name();
  void set_allocated_origin_record_name(std::string* origin_record_name);
  private:
  const std::string& _internal_origin_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_record_name(const std::string& value);
  std::string* _internal_mutable_origin_record_name();
  public:

  // bytes target_record_name = 3;
  void clear_target_record_name();
  const std::string& target_record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_record_name();
  PROTOBUF_NODISCARD std::string* release_target_record_name();
  void set_allocated_target_record_name(std::string* target_record_name);
  private:
  const std::string& _internal_target_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_record_name(const std::string& value);
  std::string* _internal_mutable_target_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // int32 row_origin = 4;
  void clear_row_origin();
  int32_t row_origin() const;
  void set_row_origin(int32_t value);
  private:
  int32_t _internal_row_origin() const;
  void _internal_set_row_origin(int32_t value);
  public:

  // int32 row_target = 5;
  void clear_row_target();
  int32_t row_target() const;
  void set_row_target(int32_t value);
  private:
  int32_t _internal_row_target() const;
  void _internal_set_row_target(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordSwap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_record_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_record_name_;
  ::NFMsg::Ident* player_id_;
  int32_t row_origin_;
  int32_t row_target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordAddRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordAddRow) */ {
 public:
  inline ObjectRecordAddRow() : ObjectRecordAddRow(nullptr) {}
  ~ObjectRecordAddRow() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordAddRow(const ObjectRecordAddRow& from);
  ObjectRecordAddRow(ObjectRecordAddRow&& from) noexcept
    : ObjectRecordAddRow() {
    *this = ::std::move(from);
  }

  inline ObjectRecordAddRow& operator=(const ObjectRecordAddRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordAddRow& operator=(ObjectRecordAddRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordAddRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordAddRow* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordAddRow*>(
               &_ObjectRecordAddRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ObjectRecordAddRow& a, ObjectRecordAddRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordAddRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordAddRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordAddRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordAddRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordAddRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordAddRow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordAddRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordAddRow";
  }
  protected:
  explicit ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowDataFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  int row_data_size() const;
  private:
  int _internal_row_data_size() const;
  public:
  void clear_row_data();
  ::NFMsg::RecordAddRowStruct* mutable_row_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
      mutable_row_data();
  private:
  const ::NFMsg::RecordAddRowStruct& _internal_row_data(int index) const;
  ::NFMsg::RecordAddRowStruct* _internal_add_row_data();
  public:
  const ::NFMsg::RecordAddRowStruct& row_data(int index) const;
  ::NFMsg::RecordAddRowStruct* add_row_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
      row_data() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordAddRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct > row_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordRemove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordRemove) */ {
 public:
  inline ObjectRecordRemove() : ObjectRecordRemove(nullptr) {}
  ~ObjectRecordRemove() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordRemove(const ObjectRecordRemove& from);
  ObjectRecordRemove(ObjectRecordRemove&& from) noexcept
    : ObjectRecordRemove() {
    *this = ::std::move(from);
  }

  inline ObjectRecordRemove& operator=(const ObjectRecordRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordRemove& operator=(ObjectRecordRemove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordRemove& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordRemove* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordRemove*>(
               &_ObjectRecordRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ObjectRecordRemove& a, ObjectRecordRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordRemove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordRemove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordRemove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordRemove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordRemove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordRemove";
  }
  protected:
  explicit ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveRowFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated int32 remove_row = 3;
  int remove_row_size() const;
  private:
  int _internal_remove_row_size() const;
  public:
  void clear_remove_row();
  private:
  int32_t _internal_remove_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_remove_row() const;
  void _internal_add_remove_row(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_remove_row();
  public:
  int32_t remove_row(int index) const;
  void set_remove_row(int index, int32_t value);
  void add_remove_row(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      remove_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_remove_row();

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_NODISCARD std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > remove_row_;
  mutable std::atomic<int> _remove_row_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyList) */ {
 public:
  inline ObjectPropertyList() : ObjectPropertyList(nullptr) {}
  ~ObjectPropertyList() override;
  explicit PROTOBUF_CONSTEXPR ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyList(const ObjectPropertyList& from);
  ObjectPropertyList(ObjectPropertyList&& from) noexcept
    : ObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyList& operator=(const ObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyList& operator=(ObjectPropertyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyList*>(
               &_ObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ObjectPropertyList& a, ObjectPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectPropertyList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectPropertyList";
  }
  protected:
  explicit ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyIntListFieldNumber = 2,
    kPropertyFloatListFieldNumber = 3,
    kPropertyStringListFieldNumber = 4,
    kPropertyObjectListFieldNumber = 5,
    kPropertyVector2ListFieldNumber = 6,
    kPropertyVector3ListFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.PropertyInt property_int_list = 2;
  int property_int_list_size() const;
  private:
  int _internal_property_int_list_size() const;
  public:
  void clear_property_int_list();
  ::NFMsg::PropertyInt* mutable_property_int_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >*
      mutable_property_int_list();
  private:
  const ::NFMsg::PropertyInt& _internal_property_int_list(int index) const;
  ::NFMsg::PropertyInt* _internal_add_property_int_list();
  public:
  const ::NFMsg::PropertyInt& property_int_list(int index) const;
  ::NFMsg::PropertyInt* add_property_int_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >&
      property_int_list() const;

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  int property_float_list_size() const;
  private:
  int _internal_property_float_list_size() const;
  public:
  void clear_property_float_list();
  ::NFMsg::PropertyFloat* mutable_property_float_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >*
      mutable_property_float_list();
  private:
  const ::NFMsg::PropertyFloat& _internal_property_float_list(int index) const;
  ::NFMsg::PropertyFloat* _internal_add_property_float_list();
  public:
  const ::NFMsg::PropertyFloat& property_float_list(int index) const;
  ::NFMsg::PropertyFloat* add_property_float_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >&
      property_float_list() const;

  // repeated .NFMsg.PropertyString property_string_list = 4;
  int property_string_list_size() const;
  private:
  int _internal_property_string_list_size() const;
  public:
  void clear_property_string_list();
  ::NFMsg::PropertyString* mutable_property_string_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >*
      mutable_property_string_list();
  private:
  const ::NFMsg::PropertyString& _internal_property_string_list(int index) const;
  ::NFMsg::PropertyString* _internal_add_property_string_list();
  public:
  const ::NFMsg::PropertyString& property_string_list(int index) const;
  ::NFMsg::PropertyString* add_property_string_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >&
      property_string_list() const;

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  int property_object_list_size() const;
  private:
  int _internal_property_object_list_size() const;
  public:
  void clear_property_object_list();
  ::NFMsg::PropertyObject* mutable_property_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >*
      mutable_property_object_list();
  private:
  const ::NFMsg::PropertyObject& _internal_property_object_list(int index) const;
  ::NFMsg::PropertyObject* _internal_add_property_object_list();
  public:
  const ::NFMsg::PropertyObject& property_object_list(int index) const;
  ::NFMsg::PropertyObject* add_property_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >&
      property_object_list() const;

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  int property_vector2_list_size() const;
  private:
  int _internal_property_vector2_list_size() const;
  public:
  void clear_property_vector2_list();
  ::NFMsg::PropertyVector2* mutable_property_vector2_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
      mutable_property_vector2_list();
  private:
  const ::NFMsg::PropertyVector2& _internal_property_vector2_list(int index) const;
  ::NFMsg::PropertyVector2* _internal_add_property_vector2_list();
  public:
  const ::NFMsg::PropertyVector2& property_vector2_list(int index) const;
  ::NFMsg::PropertyVector2* add_property_vector2_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
      property_vector2_list() const;

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  int property_vector3_list_size() const;
  private:
  int _internal_property_vector3_list_size() const;
  public:
  void clear_property_vector3_list();
  ::NFMsg::PropertyVector3* mutable_property_vector3_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
      mutable_property_vector3_list();
  private:
  const ::NFMsg::PropertyVector3& _internal_property_vector3_list(int index) const;
  ::NFMsg::PropertyVector3* _internal_add_property_vector3_list();
  public:
  const ::NFMsg::PropertyVector3& property_vector3_list(int index) const;
  ::NFMsg::PropertyVector3* add_property_vector3_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
      property_vector3_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt > property_int_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat > property_float_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString > property_string_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject > property_object_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 > property_vector2_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 > property_vector3_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class MultiObjectPropertyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.MultiObjectPropertyList) */ {
 public:
  inline MultiObjectPropertyList() : MultiObjectPropertyList(nullptr) {}
  ~MultiObjectPropertyList() override;
  explicit PROTOBUF_CONSTEXPR MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiObjectPropertyList(const MultiObjectPropertyList& from);
  MultiObjectPropertyList(MultiObjectPropertyList&& from) noexcept
    : MultiObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline MultiObjectPropertyList& operator=(const MultiObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiObjectPropertyList& operator=(MultiObjectPropertyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiObjectPropertyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectPropertyList*>(
               &_MultiObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MultiObjectPropertyList& a, MultiObjectPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiObjectPropertyList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiObjectPropertyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiObjectPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiObjectPropertyList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiObjectPropertyList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiObjectPropertyList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectPropertyList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.MultiObjectPropertyList";
  }
  protected:
  explicit MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiPlayerPropertyFieldNumber = 1,
  };
  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  int multi_player_property_size() const;
  private:
  int _internal_multi_player_property_size() const;
  public:
  void clear_multi_player_property();
  ::NFMsg::ObjectPropertyList* mutable_multi_player_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectPropertyList >*
      mutable_multi_player_property();
  private:
  const ::NFMsg::ObjectPropertyList& _internal_multi_player_property(int index) const;
  ::NFMsg::ObjectPropertyList* _internal_add_multi_player_property();
  public:
  const ::NFMsg::ObjectPropertyList& multi_player_property(int index) const;
  ::NFMsg::ObjectPropertyList* add_multi_player_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectPropertyList >&
      multi_player_property() const;

  // @@protoc_insertion_point(class_scope:NFMsg.MultiObjectPropertyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectPropertyList > multi_player_property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordList) */ {
 public:
  inline ObjectRecordList() : ObjectRecordList(nullptr) {}
  ~ObjectRecordList() override;
  explicit PROTOBUF_CONSTEXPR ObjectRecordList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordList(const ObjectRecordList& from);
  ObjectRecordList(ObjectRecordList&& from) noexcept
    : ObjectRecordList() {
    *this = ::std::move(from);
  }

  inline ObjectRecordList& operator=(const ObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordList& operator=(ObjectRecordList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordList*>(
               &_ObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ObjectRecordList& a, ObjectRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectRecordList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectRecordList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectRecordList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ObjectRecordList";
  }
  protected:
  explicit ObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  int record_list_size() const;
  private:
  int _internal_record_list_size() const;
  public:
  void clear_record_list();
  ::NFMsg::ObjectRecordBase* mutable_record_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordBase >*
      mutable_record_list();
  private:
  const ::NFMsg::ObjectRecordBase& _internal_record_list(int index) const;
  ::NFMsg::ObjectRecordBase* _internal_add_record_list();
  public:
  const ::NFMsg::ObjectRecordBase& record_list(int index) const;
  ::NFMsg::ObjectRecordBase* add_record_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordBase >&
      record_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordBase > record_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class MultiObjectRecordList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.MultiObjectRecordList) */ {
 public:
  inline MultiObjectRecordList() : MultiObjectRecordList(nullptr) {}
  ~MultiObjectRecordList() override;
  explicit PROTOBUF_CONSTEXPR MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiObjectRecordList(const MultiObjectRecordList& from);
  MultiObjectRecordList(MultiObjectRecordList&& from) noexcept
    : MultiObjectRecordList() {
    *this = ::std::move(from);
  }

  inline MultiObjectRecordList& operator=(const MultiObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiObjectRecordList& operator=(MultiObjectRecordList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiObjectRecordList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectRecordList*>(
               &_MultiObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MultiObjectRecordList& a, MultiObjectRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiObjectRecordList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiObjectRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiObjectRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiObjectRecordList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiObjectRecordList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiObjectRecordList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectRecordList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.MultiObjectRecordList";
  }
  protected:
  explicit MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiPlayerRecordFieldNumber = 1,
  };
  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  int multi_player_record_size() const;
  private:
  int _internal_multi_player_record_size() const;
  public:
  void clear_multi_player_record();
  ::NFMsg::ObjectRecordList* mutable_multi_player_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordList >*
      mutable_multi_player_record();
  private:
  const ::NFMsg::ObjectRecordList& _internal_multi_player_record(int index) const;
  ::NFMsg::ObjectRecordList* _internal_add_multi_player_record();
  public:
  const ::NFMsg::ObjectRecordList& multi_player_record(int index) const;
  ::NFMsg::ObjectRecordList* add_multi_player_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordList >&
      multi_player_record() const;

  // @@protoc_insertion_point(class_scope:NFMsg.MultiObjectRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordList > multi_player_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class MsgBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.MsgBase) */ {
 public:
  inline MsgBase() : MsgBase(nullptr) {}
  ~MsgBase() override;
  explicit PROTOBUF_CONSTEXPR MsgBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBase(const MsgBase& from);
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.MsgBase";
  }
  protected:
  explicit MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerClientListFieldNumber = 3,
    kMsgDataFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kHashIdentFieldNumber = 4,
  };
  // repeated .NFMsg.Ident player_Client_list = 3;
  int player_client_list_size() const;
  private:
  int _internal_player_client_list_size() const;
  public:
  void clear_player_client_list();
  ::NFMsg::Ident* mutable_player_client_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_player_client_list();
  private:
  const ::NFMsg::Ident& _internal_player_client_list(int index) const;
  ::NFMsg::Ident* _internal_add_player_client_list();
  public:
  const ::NFMsg::Ident& player_client_list(int index) const;
  ::NFMsg::Ident* add_player_client_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
      player_client_list() const;

  // bytes msg_data = 2;
  void clear_msg_data();
  const std::string& msg_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_data();
  PROTOBUF_NODISCARD std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // .NFMsg.Ident hash_ident = 4;
  bool has_hash_ident() const;
  private:
  bool _internal_has_hash_ident() const;
  public:
  void clear_hash_ident();
  const ::NFMsg::Ident& hash_ident() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_hash_ident();
  ::NFMsg::Ident* mutable_hash_ident();
  void set_allocated_hash_ident(::NFMsg::Ident* hash_ident);
  private:
  const ::NFMsg::Ident& _internal_hash_ident() const;
  ::NFMsg::Ident* _internal_mutable_hash_ident();
  public:
  void unsafe_arena_set_allocated_hash_ident(
      ::NFMsg::Ident* hash_ident);
  ::NFMsg::Ident* unsafe_arena_release_hash_ident();

  // @@protoc_insertion_point(class_scope:NFMsg.MsgBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident > player_client_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::NFMsg::Ident* player_id_;
  ::NFMsg::Ident* hash_ident_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ReqAckLagTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckLagTest) */ {
 public:
  inline ReqAckLagTest() : ReqAckLagTest(nullptr) {}
  ~ReqAckLagTest() override;
  explicit PROTOBUF_CONSTEXPR ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckLagTest(const ReqAckLagTest& from);
  ReqAckLagTest(ReqAckLagTest&& from) noexcept
    : ReqAckLagTest() {
    *this = ::std::move(from);
  }

  inline ReqAckLagTest& operator=(const ReqAckLagTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckLagTest& operator=(ReqAckLagTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckLagTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckLagTest* internal_default_instance() {
    return reinterpret_cast<const ReqAckLagTest*>(
               &_ReqAckLagTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ReqAckLagTest& a, ReqAckLagTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckLagTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckLagTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckLagTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckLagTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckLagTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckLagTest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckLagTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckLagTest";
  }
  protected:
  explicit ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckLagTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// -------------------------------------------------------------------

class ReqCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqCommand) */ {
 public:
  inline ReqCommand() : ReqCommand(nullptr) {}
  ~ReqCommand() override;
  explicit PROTOBUF_CONSTEXPR ReqCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCommand(const ReqCommand& from);
  ReqCommand(ReqCommand&& from) noexcept
    : ReqCommand() {
    *this = ::std::move(from);
  }

  inline ReqCommand& operator=(const ReqCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCommand& operator=(ReqCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCommand* internal_default_instance() {
    return reinterpret_cast<const ReqCommand*>(
               &_ReqCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ReqCommand& a, ReqCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqCommand";
  }
  protected:
  explicit ReqCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqCommand_EGameCommandType EGameCommandType;
  static constexpr EGameCommandType EGCT_MODIY_PROPERTY =
    ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY;
  static constexpr EGameCommandType EGCT_MODIY_ITEM =
    ReqCommand_EGameCommandType_EGCT_MODIY_ITEM;
  static constexpr EGameCommandType EGCT_CREATE_OBJECT =
    ReqCommand_EGameCommandType_EGCT_CREATE_OBJECT;
  static constexpr EGameCommandType EGCT_ADD_ROLE_EXP =
    ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP;
  static inline bool EGameCommandType_IsValid(int value) {
    return ReqCommand_EGameCommandType_IsValid(value);
  }
  static constexpr EGameCommandType EGameCommandType_MIN =
    ReqCommand_EGameCommandType_EGameCommandType_MIN;
  static constexpr EGameCommandType EGameCommandType_MAX =
    ReqCommand_EGameCommandType_EGameCommandType_MAX;
  static constexpr int EGameCommandType_ARRAYSIZE =
    ReqCommand_EGameCommandType_EGameCommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameCommandType_descriptor() {
    return ReqCommand_EGameCommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameCommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameCommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameCommandType_Name.");
    return ReqCommand_EGameCommandType_Name(enum_t_value);
  }
  static inline bool EGameCommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameCommandType* value) {
    return ReqCommand_EGameCommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandStrValueFieldNumber = 3,
    kCommandValueStrFieldNumber = 6,
    kControlIdFieldNumber = 1,
    kCommandValueObjectFieldNumber = 7,
    kCommandValueIntFieldNumber = 4,
    kCommandValueFloatFieldNumber = 5,
    kCommandIdFieldNumber = 2,
    kRowFieldNumber = 8,
    kColFieldNumber = 9,
  };
  // bytes command_str_value = 3;
  void clear_command_str_value();
  const std::string& command_str_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_str_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_str_value();
  PROTOBUF_NODISCARD std::string* release_command_str_value();
  void set_allocated_command_str_value(std::string* command_str_value);
  private:
  const std::string& _internal_command_str_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_str_value(const std::string& value);
  std::string* _internal_mutable_command_str_value();
  public:

  // bytes command_value_str = 6;
  void clear_command_value_str();
  const std::string& command_value_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_value_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_value_str();
  PROTOBUF_NODISCARD std::string* release_command_value_str();
  void set_allocated_command_value_str(std::string* command_value_str);
  private:
  const std::string& _internal_command_value_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_value_str(const std::string& value);
  std::string* _internal_mutable_command_value_str();
  public:

  // .NFMsg.Ident control_id = 1;
  bool has_control_id() const;
  private:
  bool _internal_has_control_id() const;
  public:
  void clear_control_id();
  const ::NFMsg::Ident& control_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_control_id();
  ::NFMsg::Ident* mutable_control_id();
  void set_allocated_control_id(::NFMsg::Ident* control_id);
  private:
  const ::NFMsg::Ident& _internal_control_id() const;
  ::NFMsg::Ident* _internal_mutable_control_id();
  public:
  void unsafe_arena_set_allocated_control_id(
      ::NFMsg::Ident* control_id);
  ::NFMsg::Ident* unsafe_arena_release_control_id();

  // .NFMsg.Ident command_value_object = 7;
  bool has_command_value_object() const;
  private:
  bool _internal_has_command_value_object() const;
  public:
  void clear_command_value_object();
  const ::NFMsg::Ident& command_value_object() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_command_value_object();
  ::NFMsg::Ident* mutable_command_value_object();
  void set_allocated_command_value_object(::NFMsg::Ident* command_value_object);
  private:
  const ::NFMsg::Ident& _internal_command_value_object() const;
  ::NFMsg::Ident* _internal_mutable_command_value_object();
  public:
  void unsafe_arena_set_allocated_command_value_object(
      ::NFMsg::Ident* command_value_object);
  ::NFMsg::Ident* unsafe_arena_release_command_value_object();

  // int64 command_value_int = 4;
  void clear_command_value_int();
  int64_t command_value_int() const;
  void set_command_value_int(int64_t value);
  private:
  int64_t _internal_command_value_int() const;
  void _internal_set_command_value_int(int64_t value);
  public:

  // double command_value_float = 5;
  void clear_command_value_float();
  double command_value_float() const;
  void set_command_value_float(double value);
  private:
  double _internal_command_value_float() const;
  void _internal_set_command_value_float(double value);
  public:

  // .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  void clear_command_id();
  ::NFMsg::ReqCommand_EGameCommandType command_id() const;
  void set_command_id(::NFMsg::ReqCommand_EGameCommandType value);
  private:
  ::NFMsg::ReqCommand_EGameCommandType _internal_command_id() const;
  void _internal_set_command_id(::NFMsg::ReqCommand_EGameCommandType value);
  public:

  // int32 row = 8;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 col = 9;
  void clear_col();
  int32_t col() const;
  void set_col(int32_t value);
  private:
  int32_t _internal_col() const;
  void _internal_set_col(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_str_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_value_str_;
  ::NFMsg::Ident* control_id_;
  ::NFMsg::Ident* command_value_object_;
  int64_t command_value_int_;
  double command_value_float_;
  int command_id_;
  int32_t row_;
  int32_t col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ident

// int64 svrid = 1;
inline void Ident::clear_svrid() {
  svrid_ = int64_t{0};
}
inline int64_t Ident::_internal_svrid() const {
  return svrid_;
}
inline int64_t Ident::svrid() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.svrid)
  return _internal_svrid();
}
inline void Ident::_internal_set_svrid(int64_t value) {
  
  svrid_ = value;
}
inline void Ident::set_svrid(int64_t value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:NFMsg.Ident.svrid)
}

// int64 index = 2;
inline void Ident::clear_index() {
  index_ = int64_t{0};
}
inline int64_t Ident::_internal_index() const {
  return index_;
}
inline int64_t Ident::index() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.index)
  return _internal_index();
}
inline void Ident::_internal_set_index(int64_t value) {
  
  index_ = value;
}
inline void Ident::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.Ident.index)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline float Vector2::_internal_x() const {
  return x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline float Vector2::_internal_y() const {
  return y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.z)
}

// -------------------------------------------------------------------

// PropertyInt

// bytes property_name = 1;
inline void PropertyInt::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyInt::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyInt::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.property_name)
}
inline std::string* PropertyInt::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyInt.property_name)
  return _s;
}
inline const std::string& PropertyInt::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyInt::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyInt::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyInt::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyInt.property_name)
  return property_name_.Release();
}
inline void PropertyInt::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyInt.property_name)
}

// int64 data = 2;
inline void PropertyInt::clear_data() {
  data_ = int64_t{0};
}
inline int64_t PropertyInt::_internal_data() const {
  return data_;
}
inline int64_t PropertyInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.data)
  return _internal_data();
}
inline void PropertyInt::_internal_set_data(int64_t value) {
  
  data_ = value;
}
inline void PropertyInt::set_data(int64_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.data)
}

// int64 reason = 3;
inline void PropertyInt::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyInt::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyInt::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.reason)
  return _internal_reason();
}
inline void PropertyInt::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyInt::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.reason)
}

// -------------------------------------------------------------------

// PropertyFloat

// bytes property_name = 1;
inline void PropertyFloat::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyFloat::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyFloat::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.property_name)
}
inline std::string* PropertyFloat::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyFloat.property_name)
  return _s;
}
inline const std::string& PropertyFloat::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyFloat::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyFloat::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyFloat::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyFloat.property_name)
  return property_name_.Release();
}
inline void PropertyFloat::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyFloat.property_name)
}

// float data = 2;
inline void PropertyFloat::clear_data() {
  data_ = 0;
}
inline float PropertyFloat::_internal_data() const {
  return data_;
}
inline float PropertyFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.data)
  return _internal_data();
}
inline void PropertyFloat::_internal_set_data(float value) {
  
  data_ = value;
}
inline void PropertyFloat::set_data(float value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.data)
}

// int64 reason = 3;
inline void PropertyFloat::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyFloat::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyFloat::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.reason)
  return _internal_reason();
}
inline void PropertyFloat::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyFloat::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.reason)
}

// -------------------------------------------------------------------

// PropertyString

// bytes property_name = 1;
inline void PropertyString::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyString::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyString::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.property_name)
}
inline std::string* PropertyString::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.property_name)
  return _s;
}
inline const std::string& PropertyString::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyString::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyString::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyString::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.property_name)
  return property_name_.Release();
}
inline void PropertyString::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.property_name)
}

// bytes data = 2;
inline void PropertyString::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PropertyString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyString::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.data)
}
inline std::string* PropertyString::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.data)
  return _s;
}
inline const std::string& PropertyString::_internal_data() const {
  return data_.Get();
}
inline void PropertyString::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyString::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.data)
  return data_.Release();
}
inline void PropertyString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.data)
}

// int64 reason = 3;
inline void PropertyString::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyString::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyString::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.reason)
  return _internal_reason();
}
inline void PropertyString::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyString::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.reason)
}

// -------------------------------------------------------------------

// PropertyObject

// bytes property_name = 1;
inline void PropertyObject::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyObject::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyObject::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyObject.property_name)
}
inline std::string* PropertyObject::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.property_name)
  return _s;
}
inline const std::string& PropertyObject::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyObject::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyObject::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyObject::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.property_name)
  return property_name_.Release();
}
inline void PropertyObject::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.property_name)
}

// .NFMsg.Ident data = 2;
inline bool PropertyObject::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyObject::has_data() const {
  return _internal_has_data();
}
inline void PropertyObject::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Ident& PropertyObject::_internal_data() const {
  const ::NFMsg::Ident* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& PropertyObject::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.data)
  return _internal_data();
}
inline void PropertyObject::unsafe_arena_set_allocated_data(
    ::NFMsg::Ident* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PropertyObject.data)
}
inline ::NFMsg::Ident* PropertyObject::release_data() {
  
  ::NFMsg::Ident* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* PropertyObject::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.data)
  
  ::NFMsg::Ident* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* PropertyObject::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Ident* PropertyObject::mutable_data() {
  ::NFMsg::Ident* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.data)
  return _msg;
}
inline void PropertyObject::set_allocated_data(::NFMsg::Ident* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.data)
}

// int64 reason = 3;
inline void PropertyObject::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyObject::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyObject::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.reason)
  return _internal_reason();
}
inline void PropertyObject::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyObject::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyObject.reason)
}

// -------------------------------------------------------------------

// PropertyVector2

// bytes property_name = 1;
inline void PropertyVector2::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyVector2::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyVector2::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector2.property_name)
}
inline std::string* PropertyVector2::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.property_name)
  return _s;
}
inline const std::string& PropertyVector2::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyVector2::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyVector2::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyVector2::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.property_name)
  return property_name_.Release();
}
inline void PropertyVector2::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.property_name)
}

// .NFMsg.Vector2 data = 2;
inline bool PropertyVector2::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyVector2::has_data() const {
  return _internal_has_data();
}
inline void PropertyVector2::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Vector2& PropertyVector2::_internal_data() const {
  const ::NFMsg::Vector2* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector2&>(
      ::NFMsg::_Vector2_default_instance_);
}
inline const ::NFMsg::Vector2& PropertyVector2::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.data)
  return _internal_data();
}
inline void PropertyVector2::unsafe_arena_set_allocated_data(
    ::NFMsg::Vector2* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PropertyVector2.data)
}
inline ::NFMsg::Vector2* PropertyVector2::release_data() {
  
  ::NFMsg::Vector2* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector2* PropertyVector2::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.data)
  
  ::NFMsg::Vector2* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector2* PropertyVector2::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector2>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Vector2* PropertyVector2::mutable_data() {
  ::NFMsg::Vector2* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.data)
  return _msg;
}
inline void PropertyVector2::set_allocated_data(::NFMsg::Vector2* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.data)
}

// int64 reason = 3;
inline void PropertyVector2::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyVector2::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyVector2::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.reason)
  return _internal_reason();
}
inline void PropertyVector2::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyVector2::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector2.reason)
}

// -------------------------------------------------------------------

// PropertyVector3

// bytes property_name = 1;
inline void PropertyVector3::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyVector3::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyVector3::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector3.property_name)
}
inline std::string* PropertyVector3::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.property_name)
  return _s;
}
inline const std::string& PropertyVector3::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyVector3::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyVector3::_internal_mutable_property_name() {
  
  return property_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyVector3::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.property_name)
  return property_name_.Release();
}
inline void PropertyVector3::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(property_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault()) {
    property_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.property_name)
}

// .NFMsg.Vector3 data = 2;
inline bool PropertyVector3::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyVector3::has_data() const {
  return _internal_has_data();
}
inline void PropertyVector3::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Vector3& PropertyVector3::_internal_data() const {
  const ::NFMsg::Vector3* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector3&>(
      ::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& PropertyVector3::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.data)
  return _internal_data();
}
inline void PropertyVector3::unsafe_arena_set_allocated_data(
    ::NFMsg::Vector3* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PropertyVector3.data)
}
inline ::NFMsg::Vector3* PropertyVector3::release_data() {
  
  ::NFMsg::Vector3* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector3* PropertyVector3::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.data)
  
  ::NFMsg::Vector3* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* PropertyVector3::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Vector3* PropertyVector3::mutable_data() {
  ::NFMsg::Vector3* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.data)
  return _msg;
}
inline void PropertyVector3::set_allocated_data(::NFMsg::Vector3* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.data)
}

// int64 reason = 3;
inline void PropertyVector3::clear_reason() {
  reason_ = int64_t{0};
}
inline int64_t PropertyVector3::_internal_reason() const {
  return reason_;
}
inline int64_t PropertyVector3::reason() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.reason)
  return _internal_reason();
}
inline void PropertyVector3::_internal_set_reason(int64_t value) {
  
  reason_ = value;
}
inline void PropertyVector3::set_reason(int64_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector3.reason)
}

// -------------------------------------------------------------------

// RecordInt

// int32 row = 1;
inline void RecordInt::clear_row() {
  row_ = 0;
}
inline int32_t RecordInt::_internal_row() const {
  return row_;
}
inline int32_t RecordInt::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.row)
  return _internal_row();
}
inline void RecordInt::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordInt::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.row)
}

// int32 col = 2;
inline void RecordInt::clear_col() {
  col_ = 0;
}
inline int32_t RecordInt::_internal_col() const {
  return col_;
}
inline int32_t RecordInt::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.col)
  return _internal_col();
}
inline void RecordInt::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordInt::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.col)
}

// int64 data = 3;
inline void RecordInt::clear_data() {
  data_ = int64_t{0};
}
inline int64_t RecordInt::_internal_data() const {
  return data_;
}
inline int64_t RecordInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.data)
  return _internal_data();
}
inline void RecordInt::_internal_set_data(int64_t value) {
  
  data_ = value;
}
inline void RecordInt::set_data(int64_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.data)
}

// -------------------------------------------------------------------

// RecordFloat

// int32 row = 1;
inline void RecordFloat::clear_row() {
  row_ = 0;
}
inline int32_t RecordFloat::_internal_row() const {
  return row_;
}
inline int32_t RecordFloat::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.row)
  return _internal_row();
}
inline void RecordFloat::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordFloat::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.row)
}

// int32 col = 2;
inline void RecordFloat::clear_col() {
  col_ = 0;
}
inline int32_t RecordFloat::_internal_col() const {
  return col_;
}
inline int32_t RecordFloat::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.col)
  return _internal_col();
}
inline void RecordFloat::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordFloat::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.col)
}

// float data = 3;
inline void RecordFloat::clear_data() {
  data_ = 0;
}
inline float RecordFloat::_internal_data() const {
  return data_;
}
inline float RecordFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.data)
  return _internal_data();
}
inline void RecordFloat::_internal_set_data(float value) {
  
  data_ = value;
}
inline void RecordFloat::set_data(float value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.data)
}

// -------------------------------------------------------------------

// RecordString

// int32 row = 1;
inline void RecordString::clear_row() {
  row_ = 0;
}
inline int32_t RecordString::_internal_row() const {
  return row_;
}
inline int32_t RecordString::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.row)
  return _internal_row();
}
inline void RecordString::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordString::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.row)
}

// int32 col = 2;
inline void RecordString::clear_col() {
  col_ = 0;
}
inline int32_t RecordString::_internal_col() const {
  return col_;
}
inline int32_t RecordString::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.col)
  return _internal_col();
}
inline void RecordString::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordString::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.col)
}

// bytes data = 3;
inline void RecordString::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RecordString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordString::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.data)
}
inline std::string* RecordString::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordString.data)
  return _s;
}
inline const std::string& RecordString::_internal_data() const {
  return data_.Get();
}
inline void RecordString::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordString::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordString.data)
  return data_.Release();
}
inline void RecordString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordString.data)
}

// -------------------------------------------------------------------

// RecordObject

// int32 row = 1;
inline void RecordObject::clear_row() {
  row_ = 0;
}
inline int32_t RecordObject::_internal_row() const {
  return row_;
}
inline int32_t RecordObject::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.row)
  return _internal_row();
}
inline void RecordObject::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordObject::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.row)
}

// int32 col = 2;
inline void RecordObject::clear_col() {
  col_ = 0;
}
inline int32_t RecordObject::_internal_col() const {
  return col_;
}
inline int32_t RecordObject::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.col)
  return _internal_col();
}
inline void RecordObject::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordObject::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.col)
}

// .NFMsg.Ident data = 3;
inline bool RecordObject::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordObject::has_data() const {
  return _internal_has_data();
}
inline void RecordObject::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Ident& RecordObject::_internal_data() const {
  const ::NFMsg::Ident* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& RecordObject::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.data)
  return _internal_data();
}
inline void RecordObject::unsafe_arena_set_allocated_data(
    ::NFMsg::Ident* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.RecordObject.data)
}
inline ::NFMsg::Ident* RecordObject::release_data() {
  
  ::NFMsg::Ident* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* RecordObject::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordObject.data)
  
  ::NFMsg::Ident* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* RecordObject::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Ident* RecordObject::mutable_data() {
  ::NFMsg::Ident* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordObject.data)
  return _msg;
}
inline void RecordObject::set_allocated_data(::NFMsg::Ident* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordObject.data)
}

// -------------------------------------------------------------------

// RecordVector2

// int32 row = 1;
inline void RecordVector2::clear_row() {
  row_ = 0;
}
inline int32_t RecordVector2::_internal_row() const {
  return row_;
}
inline int32_t RecordVector2::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.row)
  return _internal_row();
}
inline void RecordVector2::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordVector2::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.row)
}

// int32 col = 2;
inline void RecordVector2::clear_col() {
  col_ = 0;
}
inline int32_t RecordVector2::_internal_col() const {
  return col_;
}
inline int32_t RecordVector2::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.col)
  return _internal_col();
}
inline void RecordVector2::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordVector2::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.col)
}

// .NFMsg.Vector2 data = 3;
inline bool RecordVector2::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordVector2::has_data() const {
  return _internal_has_data();
}
inline void RecordVector2::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Vector2& RecordVector2::_internal_data() const {
  const ::NFMsg::Vector2* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector2&>(
      ::NFMsg::_Vector2_default_instance_);
}
inline const ::NFMsg::Vector2& RecordVector2::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.data)
  return _internal_data();
}
inline void RecordVector2::unsafe_arena_set_allocated_data(
    ::NFMsg::Vector2* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.RecordVector2.data)
}
inline ::NFMsg::Vector2* RecordVector2::release_data() {
  
  ::NFMsg::Vector2* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector2* RecordVector2::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector2.data)
  
  ::NFMsg::Vector2* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector2* RecordVector2::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector2>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Vector2* RecordVector2::mutable_data() {
  ::NFMsg::Vector2* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector2.data)
  return _msg;
}
inline void RecordVector2::set_allocated_data(::NFMsg::Vector2* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector2.data)
}

// -------------------------------------------------------------------

// RecordVector3

// int32 row = 1;
inline void RecordVector3::clear_row() {
  row_ = 0;
}
inline int32_t RecordVector3::_internal_row() const {
  return row_;
}
inline int32_t RecordVector3::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.row)
  return _internal_row();
}
inline void RecordVector3::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordVector3::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.row)
}

// int32 col = 2;
inline void RecordVector3::clear_col() {
  col_ = 0;
}
inline int32_t RecordVector3::_internal_col() const {
  return col_;
}
inline int32_t RecordVector3::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.col)
  return _internal_col();
}
inline void RecordVector3::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void RecordVector3::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.col)
}

// .NFMsg.Vector3 data = 3;
inline bool RecordVector3::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordVector3::has_data() const {
  return _internal_has_data();
}
inline void RecordVector3::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::NFMsg::Vector3& RecordVector3::_internal_data() const {
  const ::NFMsg::Vector3* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector3&>(
      ::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& RecordVector3::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.data)
  return _internal_data();
}
inline void RecordVector3::unsafe_arena_set_allocated_data(
    ::NFMsg::Vector3* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.RecordVector3.data)
}
inline ::NFMsg::Vector3* RecordVector3::release_data() {
  
  ::NFMsg::Vector3* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector3* RecordVector3::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector3.data)
  
  ::NFMsg::Vector3* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* RecordVector3::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::NFMsg::Vector3* RecordVector3::mutable_data() {
  ::NFMsg::Vector3* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector3.data)
  return _msg;
}
inline void RecordVector3::set_allocated_data(::NFMsg::Vector3* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector3.data)
}

// -------------------------------------------------------------------

// RecordAddRowStruct

// int32 row = 1;
inline void RecordAddRowStruct::clear_row() {
  row_ = 0;
}
inline int32_t RecordAddRowStruct::_internal_row() const {
  return row_;
}
inline int32_t RecordAddRowStruct::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.row)
  return _internal_row();
}
inline void RecordAddRowStruct::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void RecordAddRowStruct::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordAddRowStruct.row)
}

// repeated .NFMsg.RecordInt record_int_list = 2;
inline int RecordAddRowStruct::_internal_record_int_list_size() const {
  return record_int_list_.size();
}
inline int RecordAddRowStruct::record_int_list_size() const {
  return _internal_record_int_list_size();
}
inline void RecordAddRowStruct::clear_record_int_list() {
  record_int_list_.Clear();
}
inline ::NFMsg::RecordInt* RecordAddRowStruct::mutable_record_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >*
RecordAddRowStruct::mutable_record_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_int_list)
  return &record_int_list_;
}
inline const ::NFMsg::RecordInt& RecordAddRowStruct::_internal_record_int_list(int index) const {
  return record_int_list_.Get(index);
}
inline const ::NFMsg::RecordInt& RecordAddRowStruct::record_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_int_list)
  return _internal_record_int_list(index);
}
inline ::NFMsg::RecordInt* RecordAddRowStruct::_internal_add_record_int_list() {
  return record_int_list_.Add();
}
inline ::NFMsg::RecordInt* RecordAddRowStruct::add_record_int_list() {
  ::NFMsg::RecordInt* _add = _internal_add_record_int_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_int_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >&
RecordAddRowStruct::record_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_;
}

// repeated .NFMsg.RecordFloat record_float_list = 3;
inline int RecordAddRowStruct::_internal_record_float_list_size() const {
  return record_float_list_.size();
}
inline int RecordAddRowStruct::record_float_list_size() const {
  return _internal_record_float_list_size();
}
inline void RecordAddRowStruct::clear_record_float_list() {
  record_float_list_.Clear();
}
inline ::NFMsg::RecordFloat* RecordAddRowStruct::mutable_record_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >*
RecordAddRowStruct::mutable_record_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_float_list)
  return &record_float_list_;
}
inline const ::NFMsg::RecordFloat& RecordAddRowStruct::_internal_record_float_list(int index) const {
  return record_float_list_.Get(index);
}
inline const ::NFMsg::RecordFloat& RecordAddRowStruct::record_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_float_list)
  return _internal_record_float_list(index);
}
inline ::NFMsg::RecordFloat* RecordAddRowStruct::_internal_add_record_float_list() {
  return record_float_list_.Add();
}
inline ::NFMsg::RecordFloat* RecordAddRowStruct::add_record_float_list() {
  ::NFMsg::RecordFloat* _add = _internal_add_record_float_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_float_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >&
RecordAddRowStruct::record_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_;
}

// repeated .NFMsg.RecordString record_string_list = 4;
inline int RecordAddRowStruct::_internal_record_string_list_size() const {
  return record_string_list_.size();
}
inline int RecordAddRowStruct::record_string_list_size() const {
  return _internal_record_string_list_size();
}
inline void RecordAddRowStruct::clear_record_string_list() {
  record_string_list_.Clear();
}
inline ::NFMsg::RecordString* RecordAddRowStruct::mutable_record_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >*
RecordAddRowStruct::mutable_record_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_string_list)
  return &record_string_list_;
}
inline const ::NFMsg::RecordString& RecordAddRowStruct::_internal_record_string_list(int index) const {
  return record_string_list_.Get(index);
}
inline const ::NFMsg::RecordString& RecordAddRowStruct::record_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_string_list)
  return _internal_record_string_list(index);
}
inline ::NFMsg::RecordString* RecordAddRowStruct::_internal_add_record_string_list() {
  return record_string_list_.Add();
}
inline ::NFMsg::RecordString* RecordAddRowStruct::add_record_string_list() {
  ::NFMsg::RecordString* _add = _internal_add_record_string_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_string_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >&
RecordAddRowStruct::record_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_;
}

// repeated .NFMsg.RecordObject record_object_list = 5;
inline int RecordAddRowStruct::_internal_record_object_list_size() const {
  return record_object_list_.size();
}
inline int RecordAddRowStruct::record_object_list_size() const {
  return _internal_record_object_list_size();
}
inline void RecordAddRowStruct::clear_record_object_list() {
  record_object_list_.Clear();
}
inline ::NFMsg::RecordObject* RecordAddRowStruct::mutable_record_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >*
RecordAddRowStruct::mutable_record_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_object_list)
  return &record_object_list_;
}
inline const ::NFMsg::RecordObject& RecordAddRowStruct::_internal_record_object_list(int index) const {
  return record_object_list_.Get(index);
}
inline const ::NFMsg::RecordObject& RecordAddRowStruct::record_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_object_list)
  return _internal_record_object_list(index);
}
inline ::NFMsg::RecordObject* RecordAddRowStruct::_internal_add_record_object_list() {
  return record_object_list_.Add();
}
inline ::NFMsg::RecordObject* RecordAddRowStruct::add_record_object_list() {
  ::NFMsg::RecordObject* _add = _internal_add_record_object_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_object_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >&
RecordAddRowStruct::record_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_;
}

// repeated .NFMsg.RecordVector2 record_vector2_list = 6;
inline int RecordAddRowStruct::_internal_record_vector2_list_size() const {
  return record_vector2_list_.size();
}
inline int RecordAddRowStruct::record_vector2_list_size() const {
  return _internal_record_vector2_list_size();
}
inline void RecordAddRowStruct::clear_record_vector2_list() {
  record_vector2_list_.Clear();
}
inline ::NFMsg::RecordVector2* RecordAddRowStruct::mutable_record_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >*
RecordAddRowStruct::mutable_record_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return &record_vector2_list_;
}
inline const ::NFMsg::RecordVector2& RecordAddRowStruct::_internal_record_vector2_list(int index) const {
  return record_vector2_list_.Get(index);
}
inline const ::NFMsg::RecordVector2& RecordAddRowStruct::record_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector2_list)
  return _internal_record_vector2_list(index);
}
inline ::NFMsg::RecordVector2* RecordAddRowStruct::_internal_add_record_vector2_list() {
  return record_vector2_list_.Add();
}
inline ::NFMsg::RecordVector2* RecordAddRowStruct::add_record_vector2_list() {
  ::NFMsg::RecordVector2* _add = _internal_add_record_vector2_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector2_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >&
RecordAddRowStruct::record_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_;
}

// repeated .NFMsg.RecordVector3 record_vector3_list = 7;
inline int RecordAddRowStruct::_internal_record_vector3_list_size() const {
  return record_vector3_list_.size();
}
inline int RecordAddRowStruct::record_vector3_list_size() const {
  return _internal_record_vector3_list_size();
}
inline void RecordAddRowStruct::clear_record_vector3_list() {
  record_vector3_list_.Clear();
}
inline ::NFMsg::RecordVector3* RecordAddRowStruct::mutable_record_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >*
RecordAddRowStruct::mutable_record_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return &record_vector3_list_;
}
inline const ::NFMsg::RecordVector3& RecordAddRowStruct::_internal_record_vector3_list(int index) const {
  return record_vector3_list_.Get(index);
}
inline const ::NFMsg::RecordVector3& RecordAddRowStruct::record_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector3_list)
  return _internal_record_vector3_list(index);
}
inline ::NFMsg::RecordVector3* RecordAddRowStruct::_internal_add_record_vector3_list() {
  return record_vector3_list_.Add();
}
inline ::NFMsg::RecordVector3* RecordAddRowStruct::add_record_vector3_list() {
  ::NFMsg::RecordVector3* _add = _internal_add_record_vector3_list();
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector3_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >&
RecordAddRowStruct::record_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_;
}

// -------------------------------------------------------------------

// ObjectRecordBase

// bytes record_name = 1;
inline void ObjectRecordBase::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordBase::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordBase::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordBase.record_name)
}
inline std::string* ObjectRecordBase::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.record_name)
  return _s;
}
inline const std::string& ObjectRecordBase::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordBase::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordBase::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordBase::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordBase.record_name)
  return record_name_.Release();
}
inline void ObjectRecordBase::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordBase.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_struct = 2;
inline int ObjectRecordBase::_internal_row_struct_size() const {
  return row_struct_.size();
}
inline int ObjectRecordBase::row_struct_size() const {
  return _internal_row_struct_size();
}
inline void ObjectRecordBase::clear_row_struct() {
  row_struct_.Clear();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordBase::mutable_row_struct(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordBase::mutable_row_struct() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordBase.row_struct)
  return &row_struct_;
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordBase::_internal_row_struct(int index) const {
  return row_struct_.Get(index);
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordBase::row_struct(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.row_struct)
  return _internal_row_struct(index);
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordBase::_internal_add_row_struct() {
  return row_struct_.Add();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordBase::add_row_struct() {
  ::NFMsg::RecordAddRowStruct* _add = _internal_add_row_struct();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordBase.row_struct)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordBase::row_struct() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_;
}

// -------------------------------------------------------------------

// ObjectPropertyInt

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyInt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyInt::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyInt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyInt::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyInt::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyInt::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyInt.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyInt::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyInt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyInt.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyInt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyInt::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.player_id)
  return _msg;
}
inline void ObjectPropertyInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyInt.player_id)
}

// repeated .NFMsg.PropertyInt property_list = 2;
inline int ObjectPropertyInt::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyInt::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyInt::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyInt* ObjectPropertyInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyInt.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyInt& ObjectPropertyInt::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyInt& ObjectPropertyInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyInt* ObjectPropertyInt::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyInt* ObjectPropertyInt::add_property_list() {
  ::NFMsg::PropertyInt* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyInt.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyFloat

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyFloat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyFloat::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyFloat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyFloat::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyFloat::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyFloat::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyFloat.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyFloat::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyFloat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyFloat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyFloat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyFloat::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.player_id)
  return _msg;
}
inline void ObjectPropertyFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyFloat.player_id)
}

// repeated .NFMsg.PropertyFloat property_list = 2;
inline int ObjectPropertyFloat::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyFloat::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyFloat.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyFloat::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyFloat* ObjectPropertyFloat::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyFloat::add_property_list() {
  ::NFMsg::PropertyFloat* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyFloat.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyString

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyString::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyString::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyString::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyString::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyString::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyString::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyString.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyString::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyString::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyString.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyString::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyString::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.player_id)
  return _msg;
}
inline void ObjectPropertyString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyString.player_id)
}

// repeated .NFMsg.PropertyString property_list = 2;
inline int ObjectPropertyString::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyString::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyString::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyString* ObjectPropertyString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyString.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyString& ObjectPropertyString::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyString& ObjectPropertyString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyString* ObjectPropertyString::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyString* ObjectPropertyString::add_property_list() {
  ::NFMsg::PropertyString* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyString.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyObject

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyObject::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyObject::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyObject::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyObject::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyObject.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyObject::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyObject.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyObject::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.player_id)
  return _msg;
}
inline void ObjectPropertyObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyObject.player_id)
}

// repeated .NFMsg.PropertyObject property_list = 2;
inline int ObjectPropertyObject::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyObject::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyObject::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyObject* ObjectPropertyObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyObject.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyObject& ObjectPropertyObject::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyObject& ObjectPropertyObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyObject* ObjectPropertyObject::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyObject* ObjectPropertyObject::add_property_list() {
  ::NFMsg::PropertyObject* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyObject.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector2

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyVector2::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyVector2::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyVector2::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyVector2::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyVector2::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyVector2::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyVector2.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyVector2::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector2::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector2.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector2::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyVector2::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.player_id)
  return _msg;
}
inline void ObjectPropertyVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector2.player_id)
}

// repeated .NFMsg.PropertyVector2 property_list = 2;
inline int ObjectPropertyVector2::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyVector2::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector2.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyVector2::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyVector2* ObjectPropertyVector2::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyVector2::add_property_list() {
  ::NFMsg::PropertyVector2* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector2.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector3

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyVector3::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyVector3::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyVector3::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyVector3::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyVector3::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyVector3::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyVector3.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyVector3::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector3::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector3.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector3::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyVector3::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.player_id)
  return _msg;
}
inline void ObjectPropertyVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector3.player_id)
}

// repeated .NFMsg.PropertyVector3 property_list = 2;
inline int ObjectPropertyVector3::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyVector3::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector3.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyVector3::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::PropertyVector3* ObjectPropertyVector3::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyVector3::add_property_list() {
  ::NFMsg::PropertyVector3* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector3.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordInt

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordInt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordInt::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordInt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordInt::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordInt::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.player_id)
  return _internal_player_id();
}
inline void ObjectRecordInt::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordInt.player_id)
}
inline ::NFMsg::Ident* ObjectRecordInt::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordInt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordInt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordInt::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.player_id)
  return _msg;
}
inline void ObjectRecordInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordInt::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordInt::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordInt::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordInt.record_name)
}
inline std::string* ObjectRecordInt::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.record_name)
  return _s;
}
inline const std::string& ObjectRecordInt::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordInt::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordInt::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordInt::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.record_name)
  return record_name_.Release();
}
inline void ObjectRecordInt::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.record_name)
}

// repeated .NFMsg.RecordInt property_list = 3;
inline int ObjectRecordInt::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordInt::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordInt::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordInt* ObjectRecordInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >*
ObjectRecordInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordInt.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordInt& ObjectRecordInt::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordInt& ObjectRecordInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordInt* ObjectRecordInt::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordInt* ObjectRecordInt::add_property_list() {
  ::NFMsg::RecordInt* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordInt.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordInt >&
ObjectRecordInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordFloat

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordFloat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordFloat::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordFloat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordFloat::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordFloat::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.player_id)
  return _internal_player_id();
}
inline void ObjectRecordFloat::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordFloat.player_id)
}
inline ::NFMsg::Ident* ObjectRecordFloat::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordFloat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordFloat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordFloat::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.player_id)
  return _msg;
}
inline void ObjectRecordFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordFloat::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordFloat::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordFloat::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordFloat.record_name)
}
inline std::string* ObjectRecordFloat::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.record_name)
  return _s;
}
inline const std::string& ObjectRecordFloat::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordFloat::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordFloat::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordFloat::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.record_name)
  return record_name_.Release();
}
inline void ObjectRecordFloat::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.record_name)
}

// repeated .NFMsg.RecordFloat property_list = 3;
inline int ObjectRecordFloat::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordFloat::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordFloat* ObjectRecordFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >*
ObjectRecordFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordFloat.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordFloat& ObjectRecordFloat::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordFloat& ObjectRecordFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordFloat* ObjectRecordFloat::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordFloat* ObjectRecordFloat::add_property_list() {
  ::NFMsg::RecordFloat* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordFloat.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordFloat >&
ObjectRecordFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordString

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordString::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordString::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordString::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordString::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordString::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.player_id)
  return _internal_player_id();
}
inline void ObjectRecordString::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordString.player_id)
}
inline ::NFMsg::Ident* ObjectRecordString::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordString::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordString::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordString::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.player_id)
  return _msg;
}
inline void ObjectRecordString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordString::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordString::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordString::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordString.record_name)
}
inline std::string* ObjectRecordString::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.record_name)
  return _s;
}
inline const std::string& ObjectRecordString::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordString::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordString::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordString::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.record_name)
  return record_name_.Release();
}
inline void ObjectRecordString::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.record_name)
}

// repeated .NFMsg.RecordString property_list = 3;
inline int ObjectRecordString::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordString::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordString::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordString* ObjectRecordString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >*
ObjectRecordString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordString.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordString& ObjectRecordString::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordString& ObjectRecordString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordString* ObjectRecordString::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordString* ObjectRecordString::add_property_list() {
  ::NFMsg::RecordString* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordString.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordString >&
ObjectRecordString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordObject

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordObject::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordObject::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordObject::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.player_id)
  return _internal_player_id();
}
inline void ObjectRecordObject::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordObject.player_id)
}
inline ::NFMsg::Ident* ObjectRecordObject::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordObject::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.player_id)
  return _msg;
}
inline void ObjectRecordObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordObject::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordObject::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordObject::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordObject.record_name)
}
inline std::string* ObjectRecordObject::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.record_name)
  return _s;
}
inline const std::string& ObjectRecordObject::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordObject::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordObject::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordObject::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.record_name)
  return record_name_.Release();
}
inline void ObjectRecordObject::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.record_name)
}

// repeated .NFMsg.RecordObject property_list = 3;
inline int ObjectRecordObject::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordObject::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordObject::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordObject* ObjectRecordObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >*
ObjectRecordObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordObject.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordObject& ObjectRecordObject::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordObject& ObjectRecordObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordObject* ObjectRecordObject::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordObject* ObjectRecordObject::add_property_list() {
  ::NFMsg::RecordObject* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordObject.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordObject >&
ObjectRecordObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector2

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordVector2::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordVector2::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordVector2::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordVector2::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordVector2::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.player_id)
  return _internal_player_id();
}
inline void ObjectRecordVector2::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordVector2.player_id)
}
inline ::NFMsg::Ident* ObjectRecordVector2::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector2::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector2::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordVector2::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.player_id)
  return _msg;
}
inline void ObjectRecordVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector2::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordVector2::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordVector2::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector2.record_name)
}
inline std::string* ObjectRecordVector2::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.record_name)
  return _s;
}
inline const std::string& ObjectRecordVector2::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordVector2::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector2::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordVector2::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.record_name)
  return record_name_.Release();
}
inline void ObjectRecordVector2::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.record_name)
}

// repeated .NFMsg.RecordVector2 property_list = 3;
inline int ObjectRecordVector2::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordVector2::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordVector2* ObjectRecordVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >*
ObjectRecordVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector2.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordVector2& ObjectRecordVector2::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordVector2& ObjectRecordVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordVector2* ObjectRecordVector2::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordVector2* ObjectRecordVector2::add_property_list() {
  ::NFMsg::RecordVector2* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector2.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector2 >&
ObjectRecordVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector3

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordVector3::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordVector3::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordVector3::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordVector3::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordVector3::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.player_id)
  return _internal_player_id();
}
inline void ObjectRecordVector3::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordVector3.player_id)
}
inline ::NFMsg::Ident* ObjectRecordVector3::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector3::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector3::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordVector3::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.player_id)
  return _msg;
}
inline void ObjectRecordVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector3::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordVector3::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordVector3::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector3.record_name)
}
inline std::string* ObjectRecordVector3::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.record_name)
  return _s;
}
inline const std::string& ObjectRecordVector3::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordVector3::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector3::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordVector3::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.record_name)
  return record_name_.Release();
}
inline void ObjectRecordVector3::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.record_name)
}

// repeated .NFMsg.RecordVector3 property_list = 3;
inline int ObjectRecordVector3::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordVector3::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordVector3* ObjectRecordVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >*
ObjectRecordVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector3.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordVector3& ObjectRecordVector3::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::NFMsg::RecordVector3& ObjectRecordVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.property_list)
  return _internal_property_list(index);
}
inline ::NFMsg::RecordVector3* ObjectRecordVector3::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::NFMsg::RecordVector3* ObjectRecordVector3::add_property_list() {
  ::NFMsg::RecordVector3* _add = _internal_add_property_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector3.property_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordVector3 >&
ObjectRecordVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordSwap

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordSwap::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordSwap::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordSwap::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordSwap::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordSwap::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.player_id)
  return _internal_player_id();
}
inline void ObjectRecordSwap::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordSwap.player_id)
}
inline ::NFMsg::Ident* ObjectRecordSwap::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordSwap::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordSwap::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordSwap::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.player_id)
  return _msg;
}
inline void ObjectRecordSwap::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.player_id)
}

// bytes origin_record_name = 2;
inline void ObjectRecordSwap::clear_origin_record_name() {
  origin_record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordSwap::origin_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.origin_record_name)
  return _internal_origin_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordSwap::set_origin_record_name(ArgT0&& arg0, ArgT... args) {
 
 origin_record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.origin_record_name)
}
inline std::string* ObjectRecordSwap::mutable_origin_record_name() {
  std::string* _s = _internal_mutable_origin_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.origin_record_name)
  return _s;
}
inline const std::string& ObjectRecordSwap::_internal_origin_record_name() const {
  return origin_record_name_.Get();
}
inline void ObjectRecordSwap::_internal_set_origin_record_name(const std::string& value) {
  
  origin_record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::_internal_mutable_origin_record_name() {
  
  return origin_record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::release_origin_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.origin_record_name)
  return origin_record_name_.Release();
}
inline void ObjectRecordSwap::set_allocated_origin_record_name(std::string* origin_record_name) {
  if (origin_record_name != nullptr) {
    
  } else {
    
  }
  origin_record_name_.SetAllocated(origin_record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_record_name_.IsDefault()) {
    origin_record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.origin_record_name)
}

// bytes target_record_name = 3;
inline void ObjectRecordSwap::clear_target_record_name() {
  target_record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordSwap::target_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.target_record_name)
  return _internal_target_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordSwap::set_target_record_name(ArgT0&& arg0, ArgT... args) {
 
 target_record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.target_record_name)
}
inline std::string* ObjectRecordSwap::mutable_target_record_name() {
  std::string* _s = _internal_mutable_target_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.target_record_name)
  return _s;
}
inline const std::string& ObjectRecordSwap::_internal_target_record_name() const {
  return target_record_name_.Get();
}
inline void ObjectRecordSwap::_internal_set_target_record_name(const std::string& value) {
  
  target_record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::_internal_mutable_target_record_name() {
  
  return target_record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::release_target_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.target_record_name)
  return target_record_name_.Release();
}
inline void ObjectRecordSwap::set_allocated_target_record_name(std::string* target_record_name) {
  if (target_record_name != nullptr) {
    
  } else {
    
  }
  target_record_name_.SetAllocated(target_record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_record_name_.IsDefault()) {
    target_record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.target_record_name)
}

// int32 row_origin = 4;
inline void ObjectRecordSwap::clear_row_origin() {
  row_origin_ = 0;
}
inline int32_t ObjectRecordSwap::_internal_row_origin() const {
  return row_origin_;
}
inline int32_t ObjectRecordSwap::row_origin() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_origin)
  return _internal_row_origin();
}
inline void ObjectRecordSwap::_internal_set_row_origin(int32_t value) {
  
  row_origin_ = value;
}
inline void ObjectRecordSwap::set_row_origin(int32_t value) {
  _internal_set_row_origin(value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_origin)
}

// int32 row_target = 5;
inline void ObjectRecordSwap::clear_row_target() {
  row_target_ = 0;
}
inline int32_t ObjectRecordSwap::_internal_row_target() const {
  return row_target_;
}
inline int32_t ObjectRecordSwap::row_target() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_target)
  return _internal_row_target();
}
inline void ObjectRecordSwap::_internal_set_row_target(int32_t value) {
  
  row_target_ = value;
}
inline void ObjectRecordSwap::set_row_target(int32_t value) {
  _internal_set_row_target(value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_target)
}

// -------------------------------------------------------------------

// ObjectRecordAddRow

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordAddRow::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordAddRow::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordAddRow::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordAddRow::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordAddRow::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.player_id)
  return _internal_player_id();
}
inline void ObjectRecordAddRow::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordAddRow.player_id)
}
inline ::NFMsg::Ident* ObjectRecordAddRow::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordAddRow::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordAddRow::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordAddRow::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.player_id)
  return _msg;
}
inline void ObjectRecordAddRow::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordAddRow::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordAddRow::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordAddRow::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordAddRow.record_name)
}
inline std::string* ObjectRecordAddRow::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.record_name)
  return _s;
}
inline const std::string& ObjectRecordAddRow::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordAddRow::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordAddRow::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordAddRow::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.record_name)
  return record_name_.Release();
}
inline void ObjectRecordAddRow::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_data = 3;
inline int ObjectRecordAddRow::_internal_row_data_size() const {
  return row_data_.size();
}
inline int ObjectRecordAddRow::row_data_size() const {
  return _internal_row_data_size();
}
inline void ObjectRecordAddRow::clear_row_data() {
  row_data_.Clear();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordAddRow::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordAddRow.row_data)
  return &row_data_;
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordAddRow::_internal_row_data(int index) const {
  return row_data_.Get(index);
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordAddRow::row_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.row_data)
  return _internal_row_data(index);
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::_internal_add_row_data() {
  return row_data_.Add();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::add_row_data() {
  ::NFMsg::RecordAddRowStruct* _add = _internal_add_row_data();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordAddRow.row_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordAddRow::row_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_;
}

// -------------------------------------------------------------------

// ObjectRecordRemove

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordRemove::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordRemove::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordRemove::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordRemove::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordRemove::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.player_id)
  return _internal_player_id();
}
inline void ObjectRecordRemove::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordRemove.player_id)
}
inline ::NFMsg::Ident* ObjectRecordRemove::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordRemove::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordRemove::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordRemove::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.player_id)
  return _msg;
}
inline void ObjectRecordRemove::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordRemove::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordRemove::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordRemove::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.record_name)
}
inline std::string* ObjectRecordRemove::mutable_record_name() {
  std::string* _s = _internal_mutable_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.record_name)
  return _s;
}
inline const std::string& ObjectRecordRemove::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordRemove::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectRecordRemove::_internal_mutable_record_name() {
  
  return record_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectRecordRemove::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.record_name)
  return record_name_.Release();
}
inline void ObjectRecordRemove::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(record_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_name_.IsDefault()) {
    record_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.record_name)
}

// repeated int32 remove_row = 3;
inline int ObjectRecordRemove::_internal_remove_row_size() const {
  return remove_row_.size();
}
inline int ObjectRecordRemove::remove_row_size() const {
  return _internal_remove_row_size();
}
inline void ObjectRecordRemove::clear_remove_row() {
  remove_row_.Clear();
}
inline int32_t ObjectRecordRemove::_internal_remove_row(int index) const {
  return remove_row_.Get(index);
}
inline int32_t ObjectRecordRemove::remove_row(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.remove_row)
  return _internal_remove_row(index);
}
inline void ObjectRecordRemove::set_remove_row(int index, int32_t value) {
  remove_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.remove_row)
}
inline void ObjectRecordRemove::_internal_add_remove_row(int32_t value) {
  remove_row_.Add(value);
}
inline void ObjectRecordRemove::add_remove_row(int32_t value) {
  _internal_add_remove_row(value);
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordRemove.remove_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectRecordRemove::_internal_remove_row() const {
  return remove_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectRecordRemove::remove_row() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordRemove.remove_row)
  return _internal_remove_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectRecordRemove::_internal_mutable_remove_row() {
  return &remove_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectRecordRemove::mutable_remove_row() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordRemove.remove_row)
  return _internal_mutable_remove_row();
}

// -------------------------------------------------------------------

// ObjectPropertyList

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyList::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectPropertyList::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectPropertyList::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyList::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectPropertyList.player_id)
}
inline ::NFMsg::Ident* ObjectPropertyList::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyList.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectPropertyList::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.player_id)
  return _msg;
}
inline void ObjectPropertyList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyList.player_id)
}

// repeated .NFMsg.PropertyInt property_int_list = 2;
inline int ObjectPropertyList::_internal_property_int_list_size() const {
  return property_int_list_.size();
}
inline int ObjectPropertyList::property_int_list_size() const {
  return _internal_property_int_list_size();
}
inline void ObjectPropertyList::clear_property_int_list() {
  property_int_list_.Clear();
}
inline ::NFMsg::PropertyInt* ObjectPropertyList::mutable_property_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyList::mutable_property_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_int_list)
  return &property_int_list_;
}
inline const ::NFMsg::PropertyInt& ObjectPropertyList::_internal_property_int_list(int index) const {
  return property_int_list_.Get(index);
}
inline const ::NFMsg::PropertyInt& ObjectPropertyList::property_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_int_list)
  return _internal_property_int_list(index);
}
inline ::NFMsg::PropertyInt* ObjectPropertyList::_internal_add_property_int_list() {
  return property_int_list_.Add();
}
inline ::NFMsg::PropertyInt* ObjectPropertyList::add_property_int_list() {
  ::NFMsg::PropertyInt* _add = _internal_add_property_int_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_int_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyList::property_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_;
}

// repeated .NFMsg.PropertyFloat property_float_list = 3;
inline int ObjectPropertyList::_internal_property_float_list_size() const {
  return property_float_list_.size();
}
inline int ObjectPropertyList::property_float_list_size() const {
  return _internal_property_float_list_size();
}
inline void ObjectPropertyList::clear_property_float_list() {
  property_float_list_.Clear();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyList::mutable_property_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyList::mutable_property_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_float_list)
  return &property_float_list_;
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyList::_internal_property_float_list(int index) const {
  return property_float_list_.Get(index);
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyList::property_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_float_list)
  return _internal_property_float_list(index);
}
inline ::NFMsg::PropertyFloat* ObjectPropertyList::_internal_add_property_float_list() {
  return property_float_list_.Add();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyList::add_property_float_list() {
  ::NFMsg::PropertyFloat* _add = _internal_add_property_float_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_float_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyList::property_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_;
}

// repeated .NFMsg.PropertyString property_string_list = 4;
inline int ObjectPropertyList::_internal_property_string_list_size() const {
  return property_string_list_.size();
}
inline int ObjectPropertyList::property_string_list_size() const {
  return _internal_property_string_list_size();
}
inline void ObjectPropertyList::clear_property_string_list() {
  property_string_list_.Clear();
}
inline ::NFMsg::PropertyString* ObjectPropertyList::mutable_property_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyList::mutable_property_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_string_list)
  return &property_string_list_;
}
inline const ::NFMsg::PropertyString& ObjectPropertyList::_internal_property_string_list(int index) const {
  return property_string_list_.Get(index);
}
inline const ::NFMsg::PropertyString& ObjectPropertyList::property_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_string_list)
  return _internal_property_string_list(index);
}
inline ::NFMsg::PropertyString* ObjectPropertyList::_internal_add_property_string_list() {
  return property_string_list_.Add();
}
inline ::NFMsg::PropertyString* ObjectPropertyList::add_property_string_list() {
  ::NFMsg::PropertyString* _add = _internal_add_property_string_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_string_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyList::property_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_;
}

// repeated .NFMsg.PropertyObject property_object_list = 5;
inline int ObjectPropertyList::_internal_property_object_list_size() const {
  return property_object_list_.size();
}
inline int ObjectPropertyList::property_object_list_size() const {
  return _internal_property_object_list_size();
}
inline void ObjectPropertyList::clear_property_object_list() {
  property_object_list_.Clear();
}
inline ::NFMsg::PropertyObject* ObjectPropertyList::mutable_property_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyList::mutable_property_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_object_list)
  return &property_object_list_;
}
inline const ::NFMsg::PropertyObject& ObjectPropertyList::_internal_property_object_list(int index) const {
  return property_object_list_.Get(index);
}
inline const ::NFMsg::PropertyObject& ObjectPropertyList::property_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_object_list)
  return _internal_property_object_list(index);
}
inline ::NFMsg::PropertyObject* ObjectPropertyList::_internal_add_property_object_list() {
  return property_object_list_.Add();
}
inline ::NFMsg::PropertyObject* ObjectPropertyList::add_property_object_list() {
  ::NFMsg::PropertyObject* _add = _internal_add_property_object_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_object_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyList::property_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_;
}

// repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
inline int ObjectPropertyList::_internal_property_vector2_list_size() const {
  return property_vector2_list_.size();
}
inline int ObjectPropertyList::property_vector2_list_size() const {
  return _internal_property_vector2_list_size();
}
inline void ObjectPropertyList::clear_property_vector2_list() {
  property_vector2_list_.Clear();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyList::mutable_property_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyList::mutable_property_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return &property_vector2_list_;
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyList::_internal_property_vector2_list(int index) const {
  return property_vector2_list_.Get(index);
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyList::property_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector2_list)
  return _internal_property_vector2_list(index);
}
inline ::NFMsg::PropertyVector2* ObjectPropertyList::_internal_add_property_vector2_list() {
  return property_vector2_list_.Add();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyList::add_property_vector2_list() {
  ::NFMsg::PropertyVector2* _add = _internal_add_property_vector2_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector2_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyList::property_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_;
}

// repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
inline int ObjectPropertyList::_internal_property_vector3_list_size() const {
  return property_vector3_list_.size();
}
inline int ObjectPropertyList::property_vector3_list_size() const {
  return _internal_property_vector3_list_size();
}
inline void ObjectPropertyList::clear_property_vector3_list() {
  property_vector3_list_.Clear();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyList::mutable_property_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyList::mutable_property_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return &property_vector3_list_;
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyList::_internal_property_vector3_list(int index) const {
  return property_vector3_list_.Get(index);
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyList::property_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector3_list)
  return _internal_property_vector3_list(index);
}
inline ::NFMsg::PropertyVector3* ObjectPropertyList::_internal_add_property_vector3_list() {
  return property_vector3_list_.Add();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyList::add_property_vector3_list() {
  ::NFMsg::PropertyVector3* _add = _internal_add_property_vector3_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector3_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyList::property_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_;
}

// -------------------------------------------------------------------

// MultiObjectPropertyList

// repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
inline int MultiObjectPropertyList::_internal_multi_player_property_size() const {
  return multi_player_property_.size();
}
inline int MultiObjectPropertyList::multi_player_property_size() const {
  return _internal_multi_player_property_size();
}
inline void MultiObjectPropertyList::clear_multi_player_property() {
  multi_player_property_.Clear();
}
inline ::NFMsg::ObjectPropertyList* MultiObjectPropertyList::mutable_multi_player_property(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectPropertyList >*
MultiObjectPropertyList::mutable_multi_player_property() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return &multi_player_property_;
}
inline const ::NFMsg::ObjectPropertyList& MultiObjectPropertyList::_internal_multi_player_property(int index) const {
  return multi_player_property_.Get(index);
}
inline const ::NFMsg::ObjectPropertyList& MultiObjectPropertyList::multi_player_property(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectPropertyList.multi_player_property)
  return _internal_multi_player_property(index);
}
inline ::NFMsg::ObjectPropertyList* MultiObjectPropertyList::_internal_add_multi_player_property() {
  return multi_player_property_.Add();
}
inline ::NFMsg::ObjectPropertyList* MultiObjectPropertyList::add_multi_player_property() {
  ::NFMsg::ObjectPropertyList* _add = _internal_add_multi_player_property();
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectPropertyList.multi_player_property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectPropertyList >&
MultiObjectPropertyList::multi_player_property() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_;
}

// -------------------------------------------------------------------

// ObjectRecordList

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordList::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& ObjectRecordList::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ObjectRecordList::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.player_id)
  return _internal_player_id();
}
inline void ObjectRecordList::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ObjectRecordList.player_id)
}
inline ::NFMsg::Ident* ObjectRecordList::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordList.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ObjectRecordList::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.player_id)
  return _msg;
}
inline void ObjectRecordList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordList.player_id)
}

// repeated .NFMsg.ObjectRecordBase record_list = 2;
inline int ObjectRecordList::_internal_record_list_size() const {
  return record_list_.size();
}
inline int ObjectRecordList::record_list_size() const {
  return _internal_record_list_size();
}
inline void ObjectRecordList::clear_record_list() {
  record_list_.Clear();
}
inline ::NFMsg::ObjectRecordBase* ObjectRecordList::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.record_list)
  return record_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordBase >*
ObjectRecordList::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordList.record_list)
  return &record_list_;
}
inline const ::NFMsg::ObjectRecordBase& ObjectRecordList::_internal_record_list(int index) const {
  return record_list_.Get(index);
}
inline const ::NFMsg::ObjectRecordBase& ObjectRecordList::record_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.record_list)
  return _internal_record_list(index);
}
inline ::NFMsg::ObjectRecordBase* ObjectRecordList::_internal_add_record_list() {
  return record_list_.Add();
}
inline ::NFMsg::ObjectRecordBase* ObjectRecordList::add_record_list() {
  ::NFMsg::ObjectRecordBase* _add = _internal_add_record_list();
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordList.record_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordBase >&
ObjectRecordList::record_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordList.record_list)
  return record_list_;
}

// -------------------------------------------------------------------

// MultiObjectRecordList

// repeated .NFMsg.ObjectRecordList multi_player_record = 1;
inline int MultiObjectRecordList::_internal_multi_player_record_size() const {
  return multi_player_record_.size();
}
inline int MultiObjectRecordList::multi_player_record_size() const {
  return _internal_multi_player_record_size();
}
inline void MultiObjectRecordList::clear_multi_player_record() {
  multi_player_record_.Clear();
}
inline ::NFMsg::ObjectRecordList* MultiObjectRecordList::mutable_multi_player_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordList >*
MultiObjectRecordList::mutable_multi_player_record() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return &multi_player_record_;
}
inline const ::NFMsg::ObjectRecordList& MultiObjectRecordList::_internal_multi_player_record(int index) const {
  return multi_player_record_.Get(index);
}
inline const ::NFMsg::ObjectRecordList& MultiObjectRecordList::multi_player_record(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectRecordList.multi_player_record)
  return _internal_multi_player_record(index);
}
inline ::NFMsg::ObjectRecordList* MultiObjectRecordList::_internal_add_multi_player_record() {
  return multi_player_record_.Add();
}
inline ::NFMsg::ObjectRecordList* MultiObjectRecordList::add_multi_player_record() {
  ::NFMsg::ObjectRecordList* _add = _internal_add_multi_player_record();
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectRecordList.multi_player_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ObjectRecordList >&
MultiObjectRecordList::multi_player_record() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_;
}

// -------------------------------------------------------------------

// MsgBase

// .NFMsg.Ident player_id = 1;
inline bool MsgBase::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool MsgBase::has_player_id() const {
  return _internal_has_player_id();
}
inline void MsgBase::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::NFMsg::Ident& MsgBase::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& MsgBase::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_id)
  return _internal_player_id();
}
inline void MsgBase::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.MsgBase.player_id)
}
inline ::NFMsg::Ident* MsgBase::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* MsgBase::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* MsgBase::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* MsgBase::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_id)
  return _msg;
}
inline void MsgBase::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.player_id)
}

// bytes msg_data = 2;
inline void MsgBase::clear_msg_data() {
  msg_data_.ClearToEmpty();
}
inline const std::string& MsgBase::msg_data() const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.msg_data)
  return _internal_msg_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgBase::set_msg_data(ArgT0&& arg0, ArgT... args) {
 
 msg_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.MsgBase.msg_data)
}
inline std::string* MsgBase::mutable_msg_data() {
  std::string* _s = _internal_mutable_msg_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.msg_data)
  return _s;
}
inline const std::string& MsgBase::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void MsgBase::_internal_set_msg_data(const std::string& value) {
  
  msg_data_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgBase::_internal_mutable_msg_data() {
  
  return msg_data_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgBase::release_msg_data() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.msg_data)
  return msg_data_.Release();
}
inline void MsgBase::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocated(msg_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_data_.IsDefault()) {
    msg_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.msg_data)
}

// repeated .NFMsg.Ident player_Client_list = 3;
inline int MsgBase::_internal_player_client_list_size() const {
  return player_client_list_.size();
}
inline int MsgBase::player_client_list_size() const {
  return _internal_player_client_list_size();
}
inline void MsgBase::clear_player_client_list() {
  player_client_list_.Clear();
}
inline ::NFMsg::Ident* MsgBase::mutable_player_client_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
MsgBase::mutable_player_client_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MsgBase.player_Client_list)
  return &player_client_list_;
}
inline const ::NFMsg::Ident& MsgBase::_internal_player_client_list(int index) const {
  return player_client_list_.Get(index);
}
inline const ::NFMsg::Ident& MsgBase::player_client_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_Client_list)
  return _internal_player_client_list(index);
}
inline ::NFMsg::Ident* MsgBase::_internal_add_player_client_list() {
  return player_client_list_.Add();
}
inline ::NFMsg::Ident* MsgBase::add_player_client_list() {
  ::NFMsg::Ident* _add = _internal_add_player_client_list();
  // @@protoc_insertion_point(field_add:NFMsg.MsgBase.player_Client_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
MsgBase::player_client_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.MsgBase.player_Client_list)
  return player_client_list_;
}

// .NFMsg.Ident hash_ident = 4;
inline bool MsgBase::_internal_has_hash_ident() const {
  return this != internal_default_instance() && hash_ident_ != nullptr;
}
inline bool MsgBase::has_hash_ident() const {
  return _internal_has_hash_ident();
}
inline void MsgBase::clear_hash_ident() {
  if (GetArenaForAllocation() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
}
inline const ::NFMsg::Ident& MsgBase::_internal_hash_ident() const {
  const ::NFMsg::Ident* p = hash_ident_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& MsgBase::hash_ident() const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.hash_ident)
  return _internal_hash_ident();
}
inline void MsgBase::unsafe_arena_set_allocated_hash_ident(
    ::NFMsg::Ident* hash_ident) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_ident_);
  }
  hash_ident_ = hash_ident;
  if (hash_ident) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.MsgBase.hash_ident)
}
inline ::NFMsg::Ident* MsgBase::release_hash_ident() {
  
  ::NFMsg::Ident* temp = hash_ident_;
  hash_ident_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* MsgBase::unsafe_arena_release_hash_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.hash_ident)
  
  ::NFMsg::Ident* temp = hash_ident_;
  hash_ident_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* MsgBase::_internal_mutable_hash_ident() {
  
  if (hash_ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    hash_ident_ = p;
  }
  return hash_ident_;
}
inline ::NFMsg::Ident* MsgBase::mutable_hash_ident() {
  ::NFMsg::Ident* _msg = _internal_mutable_hash_ident();
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.hash_ident)
  return _msg;
}
inline void MsgBase::set_allocated_hash_ident(::NFMsg::Ident* hash_ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hash_ident_;
  }
  if (hash_ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hash_ident);
    if (message_arena != submessage_arena) {
      hash_ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_ident, submessage_arena);
    }
    
  } else {
    
  }
  hash_ident_ = hash_ident;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.hash_ident)
}

// -------------------------------------------------------------------

// ReqAckLagTest

// int32 index = 1;
inline void ReqAckLagTest::clear_index() {
  index_ = 0;
}
inline int32_t ReqAckLagTest::_internal_index() const {
  return index_;
}
inline int32_t ReqAckLagTest::index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckLagTest.index)
  return _internal_index();
}
inline void ReqAckLagTest::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void ReqAckLagTest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckLagTest.index)
}

// -------------------------------------------------------------------

// ReqCommand

// .NFMsg.Ident control_id = 1;
inline bool ReqCommand::_internal_has_control_id() const {
  return this != internal_default_instance() && control_id_ != nullptr;
}
inline bool ReqCommand::has_control_id() const {
  return _internal_has_control_id();
}
inline void ReqCommand::clear_control_id() {
  if (GetArenaForAllocation() == nullptr && control_id_ != nullptr) {
    delete control_id_;
  }
  control_id_ = nullptr;
}
inline const ::NFMsg::Ident& ReqCommand::_internal_control_id() const {
  const ::NFMsg::Ident* p = control_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqCommand::control_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.control_id)
  return _internal_control_id();
}
inline void ReqCommand::unsafe_arena_set_allocated_control_id(
    ::NFMsg::Ident* control_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_id_);
  }
  control_id_ = control_id;
  if (control_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ReqCommand.control_id)
}
inline ::NFMsg::Ident* ReqCommand::release_control_id() {
  
  ::NFMsg::Ident* temp = control_id_;
  control_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::unsafe_arena_release_control_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.control_id)
  
  ::NFMsg::Ident* temp = control_id_;
  control_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::_internal_mutable_control_id() {
  
  if (control_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    control_id_ = p;
  }
  return control_id_;
}
inline ::NFMsg::Ident* ReqCommand::mutable_control_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_control_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.control_id)
  return _msg;
}
inline void ReqCommand::set_allocated_control_id(::NFMsg::Ident* control_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_id_;
  }
  if (control_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_id);
    if (message_arena != submessage_arena) {
      control_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_id, submessage_arena);
    }
    
  } else {
    
  }
  control_id_ = control_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.control_id)
}

// .NFMsg.ReqCommand.EGameCommandType command_id = 2;
inline void ReqCommand::clear_command_id() {
  command_id_ = 0;
}
inline ::NFMsg::ReqCommand_EGameCommandType ReqCommand::_internal_command_id() const {
  return static_cast< ::NFMsg::ReqCommand_EGameCommandType >(command_id_);
}
inline ::NFMsg::ReqCommand_EGameCommandType ReqCommand::command_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_id)
  return _internal_command_id();
}
inline void ReqCommand::_internal_set_command_id(::NFMsg::ReqCommand_EGameCommandType value) {
  
  command_id_ = value;
}
inline void ReqCommand::set_command_id(::NFMsg::ReqCommand_EGameCommandType value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_id)
}

// bytes command_str_value = 3;
inline void ReqCommand::clear_command_str_value() {
  command_str_value_.ClearToEmpty();
}
inline const std::string& ReqCommand::command_str_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_str_value)
  return _internal_command_str_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCommand::set_command_str_value(ArgT0&& arg0, ArgT... args) {
 
 command_str_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_str_value)
}
inline std::string* ReqCommand::mutable_command_str_value() {
  std::string* _s = _internal_mutable_command_str_value();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_str_value)
  return _s;
}
inline const std::string& ReqCommand::_internal_command_str_value() const {
  return command_str_value_.Get();
}
inline void ReqCommand::_internal_set_command_str_value(const std::string& value) {
  
  command_str_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqCommand::_internal_mutable_command_str_value() {
  
  return command_str_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqCommand::release_command_str_value() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_str_value)
  return command_str_value_.Release();
}
inline void ReqCommand::set_allocated_command_str_value(std::string* command_str_value) {
  if (command_str_value != nullptr) {
    
  } else {
    
  }
  command_str_value_.SetAllocated(command_str_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_str_value_.IsDefault()) {
    command_str_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_str_value)
}

// int64 command_value_int = 4;
inline void ReqCommand::clear_command_value_int() {
  command_value_int_ = int64_t{0};
}
inline int64_t ReqCommand::_internal_command_value_int() const {
  return command_value_int_;
}
inline int64_t ReqCommand::command_value_int() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_int)
  return _internal_command_value_int();
}
inline void ReqCommand::_internal_set_command_value_int(int64_t value) {
  
  command_value_int_ = value;
}
inline void ReqCommand::set_command_value_int(int64_t value) {
  _internal_set_command_value_int(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_int)
}

// double command_value_float = 5;
inline void ReqCommand::clear_command_value_float() {
  command_value_float_ = 0;
}
inline double ReqCommand::_internal_command_value_float() const {
  return command_value_float_;
}
inline double ReqCommand::command_value_float() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_float)
  return _internal_command_value_float();
}
inline void ReqCommand::_internal_set_command_value_float(double value) {
  
  command_value_float_ = value;
}
inline void ReqCommand::set_command_value_float(double value) {
  _internal_set_command_value_float(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_float)
}

// bytes command_value_str = 6;
inline void ReqCommand::clear_command_value_str() {
  command_value_str_.ClearToEmpty();
}
inline const std::string& ReqCommand::command_value_str() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_str)
  return _internal_command_value_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCommand::set_command_value_str(ArgT0&& arg0, ArgT... args) {
 
 command_value_str_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_str)
}
inline std::string* ReqCommand::mutable_command_value_str() {
  std::string* _s = _internal_mutable_command_value_str();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_str)
  return _s;
}
inline const std::string& ReqCommand::_internal_command_value_str() const {
  return command_value_str_.Get();
}
inline void ReqCommand::_internal_set_command_value_str(const std::string& value) {
  
  command_value_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqCommand::_internal_mutable_command_value_str() {
  
  return command_value_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqCommand::release_command_value_str() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_str)
  return command_value_str_.Release();
}
inline void ReqCommand::set_allocated_command_value_str(std::string* command_value_str) {
  if (command_value_str != nullptr) {
    
  } else {
    
  }
  command_value_str_.SetAllocated(command_value_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_value_str_.IsDefault()) {
    command_value_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_str)
}

// .NFMsg.Ident command_value_object = 7;
inline bool ReqCommand::_internal_has_command_value_object() const {
  return this != internal_default_instance() && command_value_object_ != nullptr;
}
inline bool ReqCommand::has_command_value_object() const {
  return _internal_has_command_value_object();
}
inline void ReqCommand::clear_command_value_object() {
  if (GetArenaForAllocation() == nullptr && command_value_object_ != nullptr) {
    delete command_value_object_;
  }
  command_value_object_ = nullptr;
}
inline const ::NFMsg::Ident& ReqCommand::_internal_command_value_object() const {
  const ::NFMsg::Ident* p = command_value_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqCommand::command_value_object() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_object)
  return _internal_command_value_object();
}
inline void ReqCommand::unsafe_arena_set_allocated_command_value_object(
    ::NFMsg::Ident* command_value_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_value_object_);
  }
  command_value_object_ = command_value_object;
  if (command_value_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ReqCommand.command_value_object)
}
inline ::NFMsg::Ident* ReqCommand::release_command_value_object() {
  
  ::NFMsg::Ident* temp = command_value_object_;
  command_value_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::unsafe_arena_release_command_value_object() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_object)
  
  ::NFMsg::Ident* temp = command_value_object_;
  command_value_object_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::_internal_mutable_command_value_object() {
  
  if (command_value_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    command_value_object_ = p;
  }
  return command_value_object_;
}
inline ::NFMsg::Ident* ReqCommand::mutable_command_value_object() {
  ::NFMsg::Ident* _msg = _internal_mutable_command_value_object();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_object)
  return _msg;
}
inline void ReqCommand::set_allocated_command_value_object(::NFMsg::Ident* command_value_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_value_object_;
  }
  if (command_value_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command_value_object);
    if (message_arena != submessage_arena) {
      command_value_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_value_object, submessage_arena);
    }
    
  } else {
    
  }
  command_value_object_ = command_value_object;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_object)
}

// int32 row = 8;
inline void ReqCommand::clear_row() {
  row_ = 0;
}
inline int32_t ReqCommand::_internal_row() const {
  return row_;
}
inline int32_t ReqCommand::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.row)
  return _internal_row();
}
inline void ReqCommand::_internal_set_row(int32_t value) {
  
  row_ = value;
}
inline void ReqCommand::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.row)
}

// int32 col = 9;
inline void ReqCommand::clear_col() {
  col_ = 0;
}
inline int32_t ReqCommand::_internal_col() const {
  return col_;
}
inline int32_t ReqCommand::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.col)
  return _internal_col();
}
inline void ReqCommand::_internal_set_col(int32_t value) {
  
  col_ = value;
}
inline void ReqCommand::set_col(int32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.col)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFMsg::ReqCommand_EGameCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqCommand_EGameCommandType>() {
  return ::NFMsg::ReqCommand_EGameCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NFMsgBase_2eproto
