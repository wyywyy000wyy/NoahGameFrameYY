// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NFMsgShare_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgShare_2eproto;
namespace NFMsg {
class AckPlayerEntryList;
struct AckPlayerEntryListDefaultTypeInternal;
extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
struct AckPlayerLeaveListDefaultTypeInternal;
extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class EffectData;
struct EffectDataDefaultTypeInternal;
extern EffectDataDefaultTypeInternal _EffectData_default_instance_;
class PlayerEntryInfo;
struct PlayerEntryInfoDefaultTypeInternal;
extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class PosSyncUnit;
struct PosSyncUnitDefaultTypeInternal;
extern PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
class ReqAckEnterGameSuccess;
struct ReqAckEnterGameSuccessDefaultTypeInternal;
extern ReqAckEnterGameSuccessDefaultTypeInternal _ReqAckEnterGameSuccess_default_instance_;
class ReqAckPlayerChat;
struct ReqAckPlayerChatDefaultTypeInternal;
extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSync;
struct ReqAckPlayerPosSyncDefaultTypeInternal;
extern ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
class ReqAckSwapScene;
struct ReqAckSwapSceneDefaultTypeInternal;
extern ReqAckSwapSceneDefaultTypeInternal _ReqAckSwapScene_default_instance_;
class ReqAckUseSkill;
struct ReqAckUseSkillDefaultTypeInternal;
extern ReqAckUseSkillDefaultTypeInternal _ReqAckUseSkill_default_instance_;
class ReqEnterGameServer;
struct ReqEnterGameServerDefaultTypeInternal;
extern ReqEnterGameServerDefaultTypeInternal _ReqEnterGameServer_default_instance_;
class ReqHeartBeat;
struct ReqHeartBeatDefaultTypeInternal;
extern ReqHeartBeatDefaultTypeInternal _ReqHeartBeat_default_instance_;
class ReqLeaveGameServer;
struct ReqLeaveGameServerDefaultTypeInternal;
extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerEntryList>(Arena*);
template<> ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerLeaveList>(Arena*);
template<> ::NFMsg::EffectData* Arena::CreateMaybeMessage<::NFMsg::EffectData>(Arena*);
template<> ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage<::NFMsg::PlayerEntryInfo>(Arena*);
template<> ::NFMsg::PosSyncUnit* Arena::CreateMaybeMessage<::NFMsg::PosSyncUnit>(Arena*);
template<> ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage<::NFMsg::ReqAckEnterGameSuccess>(Arena*);
template<> ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerChat>(Arena*);
template<> ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerPosSync>(Arena*);
template<> ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage<::NFMsg::ReqAckSwapScene>(Arena*);
template<> ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage<::NFMsg::ReqAckUseSkill>(Arena*);
template<> ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqEnterGameServer>(Arena*);
template<> ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage<::NFMsg::ReqHeartBeat>(Arena*);
template<> ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqLeaveGameServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFMsg {

enum PosSyncUnit_EMoveType : int {
  PosSyncUnit_EMoveType_EMT_WALK = 0,
  PosSyncUnit_EMoveType_EET_SPEEDY = 1,
  PosSyncUnit_EMoveType_EET_TELEPORT = 2,
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PosSyncUnit_EMoveType_IsValid(int value);
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MIN = PosSyncUnit_EMoveType_EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MAX = PosSyncUnit_EMoveType_EET_TELEPORT;
constexpr int PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE = PosSyncUnit_EMoveType_EMoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor();
template<typename T>
inline const std::string& PosSyncUnit_EMoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosSyncUnit_EMoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosSyncUnit_EMoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosSyncUnit_EMoveType_descriptor(), enum_t_value);
}
inline bool PosSyncUnit_EMoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PosSyncUnit_EMoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosSyncUnit_EMoveType>(
    PosSyncUnit_EMoveType_descriptor(), name, value);
}
enum EffectData_EResultType : int {
  EffectData_EResultType_EET_FAIL = 0,
  EffectData_EResultType_EET_SUCCESS = 1,
  EffectData_EResultType_EET_REFUSE = 2,
  EffectData_EResultType_EET_MISS = 3,
  EffectData_EResultType_EET_CRIT = 4,
  EffectData_EResultType_EET_ULTI = 5,
  EffectData_EResultType_EffectData_EResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EffectData_EResultType_EffectData_EResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EffectData_EResultType_IsValid(int value);
constexpr EffectData_EResultType EffectData_EResultType_EResultType_MIN = EffectData_EResultType_EET_FAIL;
constexpr EffectData_EResultType EffectData_EResultType_EResultType_MAX = EffectData_EResultType_EET_ULTI;
constexpr int EffectData_EResultType_EResultType_ARRAYSIZE = EffectData_EResultType_EResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectData_EResultType_descriptor();
template<typename T>
inline const std::string& EffectData_EResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectData_EResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectData_EResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EffectData_EResultType_descriptor(), enum_t_value);
}
inline bool EffectData_EResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EffectData_EResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EffectData_EResultType>(
    EffectData_EResultType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatChannel : int {
  ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL = 0,
  ReqAckPlayerChat_EGameChatChannel_EGCC_CLAN = 1,
  ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM = 2,
  ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM = 3,
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN = ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX = ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
constexpr int ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE = ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatChannel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatChannel>(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType : int {
  ReqAckPlayerChat_EGameChatType_EGCT_TEXT = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_VOICE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_EMOJI = 2,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
constexpr int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
// ===================================================================

class ReqEnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqEnterGameServer) */ {
 public:
  inline ReqEnterGameServer() : ReqEnterGameServer(nullptr) {}
  ~ReqEnterGameServer() override;
  explicit PROTOBUF_CONSTEXPR ReqEnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqEnterGameServer(const ReqEnterGameServer& from);
  ReqEnterGameServer(ReqEnterGameServer&& from) noexcept
    : ReqEnterGameServer() {
    *this = ::std::move(from);
  }

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEnterGameServer& operator=(ReqEnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqEnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqEnterGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGameServer*>(
               &_ReqEnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqEnterGameServer& a, ReqEnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqEnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqEnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqEnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqEnterGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqEnterGameServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqEnterGameServer";
  }
  protected:
  explicit ReqEnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kGameIdFieldNumber = 3,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::NFMsg::Ident* id);
  ::NFMsg::Ident* unsafe_arena_release_id();

  // int32 game_id = 3;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  int32_t game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckEnterGameSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckEnterGameSuccess) */ {
 public:
  inline ReqAckEnterGameSuccess() : ReqAckEnterGameSuccess(nullptr) {}
  ~ReqAckEnterGameSuccess() override;
  explicit PROTOBUF_CONSTEXPR ReqAckEnterGameSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from);
  ReqAckEnterGameSuccess(ReqAckEnterGameSuccess&& from) noexcept
    : ReqAckEnterGameSuccess() {
    *this = ::std::move(from);
  }

  inline ReqAckEnterGameSuccess& operator=(const ReqAckEnterGameSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckEnterGameSuccess& operator=(ReqAckEnterGameSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckEnterGameSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckEnterGameSuccess* internal_default_instance() {
    return reinterpret_cast<const ReqAckEnterGameSuccess*>(
               &_ReqAckEnterGameSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqAckEnterGameSuccess& a, ReqAckEnterGameSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckEnterGameSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckEnterGameSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckEnterGameSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckEnterGameSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckEnterGameSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckEnterGameSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckEnterGameSuccess";
  }
  protected:
  explicit ReqAckEnterGameSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  int32_t arg() const;
  void set_arg(int32_t value);
  private:
  int32_t _internal_arg() const;
  void _internal_set_arg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckEnterGameSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqHeartBeat) */ {
 public:
  inline ReqHeartBeat() : ReqHeartBeat(nullptr) {}
  ~ReqHeartBeat() override;
  explicit PROTOBUF_CONSTEXPR ReqHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHeartBeat(const ReqHeartBeat& from);
  ReqHeartBeat(ReqHeartBeat&& from) noexcept
    : ReqHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeartBeat& operator=(ReqHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqHeartBeat*>(
               &_ReqHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqHeartBeat& a, ReqHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHeartBeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqHeartBeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqHeartBeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqHeartBeat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHeartBeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqHeartBeat";
  }
  protected:
  explicit ReqHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  int32_t arg() const;
  void set_arg(int32_t value);
  private:
  int32_t _internal_arg() const;
  void _internal_set_arg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqLeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqLeaveGameServer) */ {
 public:
  inline ReqLeaveGameServer() : ReqLeaveGameServer(nullptr) {}
  ~ReqLeaveGameServer() override;
  explicit PROTOBUF_CONSTEXPR ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLeaveGameServer(const ReqLeaveGameServer& from);
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqLeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqLeaveGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqLeaveGameServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqLeaveGameServer";
  }
  protected:
  explicit ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  int32_t arg() const;
  void set_arg(int32_t value);
  private:
  int32_t _internal_arg() const;
  void _internal_set_arg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqLeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class PlayerEntryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PlayerEntryInfo) */ {
 public:
  inline PlayerEntryInfo() : PlayerEntryInfo(nullptr) {}
  ~PlayerEntryInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerEntryInfo(const PlayerEntryInfo& from);
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerEntryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerEntryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerEntryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerEntryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerEntryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerEntryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerEntryInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PlayerEntryInfo";
  }
  protected:
  explicit PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 7,
    kClassIdFieldNumber = 9,
    kObjectGuidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kCareerTypeFieldNumber = 5,
    kPlayerStateFieldNumber = 6,
    kSceneIdFieldNumber = 8,
  };
  // bytes config_id = 7;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_NODISCARD std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // bytes class_id = 9;
  void clear_class_id();
  const std::string& class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* class_id);
  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(const std::string& value);
  std::string* _internal_mutable_class_id();
  public:

  // .NFMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  private:
  bool _internal_has_object_guid() const;
  public:
  void clear_object_guid();
  const ::NFMsg::Ident& object_guid() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_object_guid();
  ::NFMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::NFMsg::Ident* object_guid);
  private:
  const ::NFMsg::Ident& _internal_object_guid() const;
  ::NFMsg::Ident* _internal_mutable_object_guid();
  public:
  void unsafe_arena_set_allocated_object_guid(
      ::NFMsg::Ident* object_guid);
  ::NFMsg::Ident* unsafe_arena_release_object_guid();

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 career_type = 5;
  void clear_career_type();
  int32_t career_type() const;
  void set_career_type(int32_t value);
  private:
  int32_t _internal_career_type() const;
  void _internal_set_career_type(int32_t value);
  public:

  // int32 player_state = 6;
  void clear_player_state();
  int32_t player_state() const;
  void set_player_state(int32_t value);
  private:
  int32_t _internal_player_state() const;
  void _internal_set_player_state(int32_t value);
  public:

  // int32 scene_id = 8;
  void clear_scene_id();
  int32_t scene_id() const;
  void set_scene_id(int32_t value);
  private:
  int32_t _internal_scene_id() const;
  void _internal_set_scene_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PlayerEntryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
  ::NFMsg::Ident* object_guid_;
  float x_;
  float y_;
  float z_;
  int32_t career_type_;
  int32_t player_state_;
  int32_t scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerEntryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerEntryList) */ {
 public:
  inline AckPlayerEntryList() : AckPlayerEntryList(nullptr) {}
  ~AckPlayerEntryList() override;
  explicit PROTOBUF_CONSTEXPR AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerEntryList(const AckPlayerEntryList& from);
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerEntryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerEntryList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerEntryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckPlayerEntryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckPlayerEntryList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AckPlayerEntryList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AckPlayerEntryList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerEntryList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.AckPlayerEntryList";
  }
  protected:
  explicit AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::NFMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
      mutable_object_list();
  private:
  const ::NFMsg::PlayerEntryInfo& _internal_object_list(int index) const;
  ::NFMsg::PlayerEntryInfo* _internal_add_object_list();
  public:
  const ::NFMsg::PlayerEntryInfo& object_list(int index) const;
  ::NFMsg::PlayerEntryInfo* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerEntryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerLeaveList) */ {
 public:
  inline AckPlayerLeaveList() : AckPlayerLeaveList(nullptr) {}
  ~AckPlayerLeaveList() override;
  explicit PROTOBUF_CONSTEXPR AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerLeaveList(const AckPlayerLeaveList& from);
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerLeaveList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerLeaveList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerLeaveList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckPlayerLeaveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AckPlayerLeaveList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AckPlayerLeaveList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLeaveList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.AckPlayerLeaveList";
  }
  protected:
  explicit AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .NFMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::NFMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_object_list();
  private:
  const ::NFMsg::Ident& _internal_object_list(int index) const;
  ::NFMsg::Ident* _internal_add_object_list();
  public:
  const ::NFMsg::Ident& object_list(int index) const;
  ::NFMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerLeaveList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class PosSyncUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PosSyncUnit) */ {
 public:
  inline PosSyncUnit() : PosSyncUnit(nullptr) {}
  ~PosSyncUnit() override;
  explicit PROTOBUF_CONSTEXPR PosSyncUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosSyncUnit(const PosSyncUnit& from);
  PosSyncUnit(PosSyncUnit&& from) noexcept
    : PosSyncUnit() {
    *this = ::std::move(from);
  }

  inline PosSyncUnit& operator=(const PosSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosSyncUnit& operator=(PosSyncUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosSyncUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosSyncUnit* internal_default_instance() {
    return reinterpret_cast<const PosSyncUnit*>(
               &_PosSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PosSyncUnit& a, PosSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(PosSyncUnit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosSyncUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosSyncUnit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PosSyncUnit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PosSyncUnit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosSyncUnit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PosSyncUnit";
  }
  protected:
  explicit PosSyncUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PosSyncUnit_EMoveType EMoveType;
  static constexpr EMoveType EMT_WALK =
    PosSyncUnit_EMoveType_EMT_WALK;
  static constexpr EMoveType EET_SPEEDY =
    PosSyncUnit_EMoveType_EET_SPEEDY;
  static constexpr EMoveType EET_TELEPORT =
    PosSyncUnit_EMoveType_EET_TELEPORT;
  static inline bool EMoveType_IsValid(int value) {
    return PosSyncUnit_EMoveType_IsValid(value);
  }
  static constexpr EMoveType EMoveType_MIN =
    PosSyncUnit_EMoveType_EMoveType_MIN;
  static constexpr EMoveType EMoveType_MAX =
    PosSyncUnit_EMoveType_EMoveType_MAX;
  static constexpr int EMoveType_ARRAYSIZE =
    PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EMoveType_descriptor() {
    return PosSyncUnit_EMoveType_descriptor();
  }
  template<typename T>
  static inline const std::string& EMoveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EMoveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EMoveType_Name.");
    return PosSyncUnit_EMoveType_Name(enum_t_value);
  }
  static inline bool EMoveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EMoveType* value) {
    return PosSyncUnit_EMoveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMoverFieldNumber = 1,
    kPosFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // .NFMsg.Ident mover = 1;
  bool has_mover() const;
  private:
  bool _internal_has_mover() const;
  public:
  void clear_mover();
  const ::NFMsg::Ident& mover() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_mover();
  ::NFMsg::Ident* mutable_mover();
  void set_allocated_mover(::NFMsg::Ident* mover);
  private:
  const ::NFMsg::Ident& _internal_mover() const;
  ::NFMsg::Ident* _internal_mutable_mover();
  public:
  void unsafe_arena_set_allocated_mover(
      ::NFMsg::Ident* mover);
  ::NFMsg::Ident* unsafe_arena_release_mover();

  // .NFMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::NFMsg::Vector3& pos() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector3* release_pos();
  ::NFMsg::Vector3* mutable_pos();
  void set_allocated_pos(::NFMsg::Vector3* pos);
  private:
  const ::NFMsg::Vector3& _internal_pos() const;
  ::NFMsg::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::NFMsg::Vector3* pos);
  ::NFMsg::Vector3* unsafe_arena_release_pos();

  // .NFMsg.Vector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::NFMsg::Vector3& orientation() const;
  PROTOBUF_NODISCARD ::NFMsg::Vector3* release_orientation();
  ::NFMsg::Vector3* mutable_orientation();
  void set_allocated_orientation(::NFMsg::Vector3* orientation);
  private:
  const ::NFMsg::Vector3& _internal_orientation() const;
  ::NFMsg::Vector3* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::NFMsg::Vector3* orientation);
  ::NFMsg::Vector3* unsafe_arena_release_orientation();

  // int32 status = 4;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  void clear_type();
  ::NFMsg::PosSyncUnit_EMoveType type() const;
  void set_type(::NFMsg::PosSyncUnit_EMoveType value);
  private:
  ::NFMsg::PosSyncUnit_EMoveType _internal_type() const;
  void _internal_set_type(::NFMsg::PosSyncUnit_EMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PosSyncUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NFMsg::Ident* mover_;
  ::NFMsg::Vector3* pos_;
  ::NFMsg::Vector3* orientation_;
  int32_t status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerPosSync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerPosSync) */ {
 public:
  inline ReqAckPlayerPosSync() : ReqAckPlayerPosSync(nullptr) {}
  ~ReqAckPlayerPosSync() override;
  explicit PROTOBUF_CONSTEXPR ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from);
  ReqAckPlayerPosSync(ReqAckPlayerPosSync&& from) noexcept
    : ReqAckPlayerPosSync() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerPosSync& operator=(const ReqAckPlayerPosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerPosSync& operator=(ReqAckPlayerPosSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerPosSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerPosSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerPosSync*>(
               &_ReqAckPlayerPosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqAckPlayerPosSync& a, ReqAckPlayerPosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckPlayerPosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckPlayerPosSync& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckPlayerPosSync& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerPosSync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckPlayerPosSync";
  }
  protected:
  explicit ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  int sync_unit_size() const;
  private:
  int _internal_sync_unit_size() const;
  public:
  void clear_sync_unit();
  ::NFMsg::PosSyncUnit* mutable_sync_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >*
      mutable_sync_unit();
  private:
  const ::NFMsg::PosSyncUnit& _internal_sync_unit(int index) const;
  ::NFMsg::PosSyncUnit* _internal_add_sync_unit();
  public:
  const ::NFMsg::PosSyncUnit& sync_unit(int index) const;
  ::NFMsg::PosSyncUnit* add_sync_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >&
      sync_unit() const;

  // int32 sequence = 1;
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerPosSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit > sync_unit_;
  int32_t sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class EffectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.EffectData) */ {
 public:
  inline EffectData() : EffectData(nullptr) {}
  ~EffectData() override;
  explicit PROTOBUF_CONSTEXPR EffectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EffectData(const EffectData& from);
  EffectData(EffectData&& from) noexcept
    : EffectData() {
    *this = ::std::move(from);
  }

  inline EffectData& operator=(const EffectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectData& operator=(EffectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EffectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EffectData* internal_default_instance() {
    return reinterpret_cast<const EffectData*>(
               &_EffectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EffectData& a, EffectData& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EffectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EffectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EffectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EffectData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.EffectData";
  }
  protected:
  explicit EffectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EffectData_EResultType EResultType;
  static constexpr EResultType EET_FAIL =
    EffectData_EResultType_EET_FAIL;
  static constexpr EResultType EET_SUCCESS =
    EffectData_EResultType_EET_SUCCESS;
  static constexpr EResultType EET_REFUSE =
    EffectData_EResultType_EET_REFUSE;
  static constexpr EResultType EET_MISS =
    EffectData_EResultType_EET_MISS;
  static constexpr EResultType EET_CRIT =
    EffectData_EResultType_EET_CRIT;
  static constexpr EResultType EET_ULTI =
    EffectData_EResultType_EET_ULTI;
  static inline bool EResultType_IsValid(int value) {
    return EffectData_EResultType_IsValid(value);
  }
  static constexpr EResultType EResultType_MIN =
    EffectData_EResultType_EResultType_MIN;
  static constexpr EResultType EResultType_MAX =
    EffectData_EResultType_EResultType_MAX;
  static constexpr int EResultType_ARRAYSIZE =
    EffectData_EResultType_EResultType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResultType_descriptor() {
    return EffectData_EResultType_descriptor();
  }
  template<typename T>
  static inline const std::string& EResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResultType_Name.");
    return EffectData_EResultType_Name(enum_t_value);
  }
  static inline bool EResultType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResultType* value) {
    return EffectData_EResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdentFieldNumber = 1,
    kEffectValueFieldNumber = 2,
    kEffectRltFieldNumber = 3,
  };
  // .NFMsg.Ident effect_ident = 1;
  bool has_effect_ident() const;
  private:
  bool _internal_has_effect_ident() const;
  public:
  void clear_effect_ident();
  const ::NFMsg::Ident& effect_ident() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_effect_ident();
  ::NFMsg::Ident* mutable_effect_ident();
  void set_allocated_effect_ident(::NFMsg::Ident* effect_ident);
  private:
  const ::NFMsg::Ident& _internal_effect_ident() const;
  ::NFMsg::Ident* _internal_mutable_effect_ident();
  public:
  void unsafe_arena_set_allocated_effect_ident(
      ::NFMsg::Ident* effect_ident);
  ::NFMsg::Ident* unsafe_arena_release_effect_ident();

  // int32 effect_value = 2;
  void clear_effect_value();
  int32_t effect_value() const;
  void set_effect_value(int32_t value);
  private:
  int32_t _internal_effect_value() const;
  void _internal_set_effect_value(int32_t value);
  public:

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  void clear_effect_rlt();
  ::NFMsg::EffectData_EResultType effect_rlt() const;
  void set_effect_rlt(::NFMsg::EffectData_EResultType value);
  private:
  ::NFMsg::EffectData_EResultType _internal_effect_rlt() const;
  void _internal_set_effect_rlt(::NFMsg::EffectData_EResultType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.EffectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NFMsg::Ident* effect_ident_;
  int32_t effect_value_;
  int effect_rlt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckUseSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckUseSkill) */ {
 public:
  inline ReqAckUseSkill() : ReqAckUseSkill(nullptr) {}
  ~ReqAckUseSkill() override;
  explicit PROTOBUF_CONSTEXPR ReqAckUseSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckUseSkill(const ReqAckUseSkill& from);
  ReqAckUseSkill(ReqAckUseSkill&& from) noexcept
    : ReqAckUseSkill() {
    *this = ::std::move(from);
  }

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckUseSkill& operator=(ReqAckUseSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckUseSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckUseSkill* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseSkill*>(
               &_ReqAckUseSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqAckUseSkill& a, ReqAckUseSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckUseSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckUseSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckUseSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckUseSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckUseSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckUseSkill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckUseSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckUseSkill";
  }
  protected:
  explicit ReqAckUseSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectDataFieldNumber = 5,
    kSkillIdFieldNumber = 2,
    kUserFieldNumber = 1,
    kServerIndexFieldNumber = 4,
    kClientIndexFieldNumber = 3,
  };
  // repeated .NFMsg.EffectData effect_data = 5;
  int effect_data_size() const;
  private:
  int _internal_effect_data_size() const;
  public:
  void clear_effect_data();
  ::NFMsg::EffectData* mutable_effect_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >*
      mutable_effect_data();
  private:
  const ::NFMsg::EffectData& _internal_effect_data(int index) const;
  ::NFMsg::EffectData* _internal_add_effect_data();
  public:
  const ::NFMsg::EffectData& effect_data(int index) const;
  ::NFMsg::EffectData* add_effect_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >&
      effect_data() const;

  // bytes skill_id = 2;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // .NFMsg.Ident user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::NFMsg::Ident& user() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_user();
  ::NFMsg::Ident* mutable_user();
  void set_allocated_user(::NFMsg::Ident* user);
  private:
  const ::NFMsg::Ident& _internal_user() const;
  ::NFMsg::Ident* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::NFMsg::Ident* user);
  ::NFMsg::Ident* unsafe_arena_release_user();

  // int64 server_index = 4;
  void clear_server_index();
  int64_t server_index() const;
  void set_server_index(int64_t value);
  private:
  int64_t _internal_server_index() const;
  void _internal_set_server_index(int64_t value);
  public:

  // int32 client_index = 3;
  void clear_client_index();
  int32_t client_index() const;
  void set_client_index(int32_t value);
  private:
  int32_t _internal_client_index() const;
  void _internal_set_client_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData > effect_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
  ::NFMsg::Ident* user_;
  int64_t server_index_;
  int32_t client_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckSwapScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckSwapScene) */ {
 public:
  inline ReqAckSwapScene() : ReqAckSwapScene(nullptr) {}
  ~ReqAckSwapScene() override;
  explicit PROTOBUF_CONSTEXPR ReqAckSwapScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckSwapScene(const ReqAckSwapScene& from);
  ReqAckSwapScene(ReqAckSwapScene&& from) noexcept
    : ReqAckSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckSwapScene& operator=(ReqAckSwapScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckSwapScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqAckSwapScene*>(
               &_ReqAckSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqAckSwapScene& a, ReqAckSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckSwapScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckSwapScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckSwapScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckSwapScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckSwapScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSwapScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckSwapScene";
  }
  protected:
  explicit ReqAckSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kTransferTypeFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kLineIdFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
  };
  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 transfer_type = 1;
  void clear_transfer_type();
  int32_t transfer_type() const;
  void set_transfer_type(int32_t value);
  private:
  int32_t _internal_transfer_type() const;
  void _internal_set_transfer_type(int32_t value);
  public:

  // int32 scene_id = 2;
  void clear_scene_id();
  int32_t scene_id() const;
  void set_scene_id(int32_t value);
  private:
  int32_t _internal_scene_id() const;
  void _internal_set_scene_id(int32_t value);
  public:

  // int32 line_id = 3;
  void clear_line_id();
  int32_t line_id() const;
  void set_line_id(int32_t value);
  private:
  int32_t _internal_line_id() const;
  void _internal_set_line_id(int32_t value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 6;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSwapScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t transfer_type_;
  int32_t scene_id_;
  int32_t line_id_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerChat) */ {
 public:
  inline ReqAckPlayerChat() : ReqAckPlayerChat(nullptr) {}
  ~ReqAckPlayerChat() override;
  explicit PROTOBUF_CONSTEXPR ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerChat(const ReqAckPlayerChat& from);
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqAckPlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqAckPlayerChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqAckPlayerChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckPlayerChat";
  }
  protected:
  explicit ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatChannel EGameChatChannel;
  static constexpr EGameChatChannel EGCC_GLOBAL =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
  static constexpr EGameChatChannel EGCC_CLAN =
    ReqAckPlayerChat_EGameChatChannel_EGCC_CLAN;
  static constexpr EGameChatChannel EGCC_ROOM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM;
  static constexpr EGameChatChannel EGCC_TEAM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
  static inline bool EGameChatChannel_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatChannel_IsValid(value);
  }
  static constexpr EGameChatChannel EGameChatChannel_MIN =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN;
  static constexpr EGameChatChannel EGameChatChannel_MAX =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX;
  static constexpr int EGameChatChannel_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatChannel_descriptor() {
    return ReqAckPlayerChat_EGameChatChannel_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatChannel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatChannel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatChannel_Name.");
    return ReqAckPlayerChat_EGameChatChannel_Name(enum_t_value);
  }
  static inline bool EGameChatChannel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatChannel* value) {
    return ReqAckPlayerChat_EGameChatChannel_Parse(name, value);
  }

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static constexpr EGameChatType EGCT_TEXT =
    ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
  static constexpr EGameChatType EGCT_VOICE =
    ReqAckPlayerChat_EGameChatType_EGCT_VOICE;
  static constexpr EGameChatType EGCT_EMOJI =
    ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static constexpr EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static constexpr EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static constexpr int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatType_Name.");
    return ReqAckPlayerChat_EGameChatType_Name(enum_t_value);
  }
  static inline bool EGameChatType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kChatInfoFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kChatChannelFieldNumber = 3,
    kChatTypeFieldNumber = 4,
  };
  // bytes player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // bytes chat_info = 5;
  void clear_chat_info();
  const std::string& chat_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_info();
  PROTOBUF_NODISCARD std::string* release_chat_info();
  void set_allocated_chat_info(std::string* chat_info);
  private:
  const std::string& _internal_chat_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_info(const std::string& value);
  std::string* _internal_mutable_chat_info();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  PROTOBUF_NODISCARD ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::NFMsg::Ident* player_id);
  ::NFMsg::Ident* unsafe_arena_release_player_id();

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  void clear_chat_channel();
  ::NFMsg::ReqAckPlayerChat_EGameChatChannel chat_channel() const;
  void set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value);
  private:
  ::NFMsg::ReqAckPlayerChat_EGameChatChannel _internal_chat_channel() const;
  void _internal_set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value);
  public:

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  void clear_chat_type();
  ::NFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);
  private:
  ::NFMsg::ReqAckPlayerChat_EGameChatType _internal_chat_type() const;
  void _internal_set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_info_;
  ::NFMsg::Ident* player_id_;
  int chat_channel_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqEnterGameServer

// .NFMsg.Ident id = 1;
inline bool ReqEnterGameServer::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqEnterGameServer::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqEnterGameServer::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqEnterGameServer::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.id)
  return _internal_id();
}
inline void ReqEnterGameServer::unsafe_arena_set_allocated_id(
    ::NFMsg::Ident* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ReqEnterGameServer.id)
}
inline ::NFMsg::Ident* ReqEnterGameServer::release_id() {
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ReqEnterGameServer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqEnterGameServer::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqEnterGameServer::mutable_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.id)
  return _msg;
}
inline void ReqEnterGameServer::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.id)
}

// bytes account = 2;
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqEnterGameServer::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.account)
}
inline std::string* ReqEnterGameServer::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.account)
  return _s;
}
inline const std::string& ReqEnterGameServer::_internal_account() const {
  return account_.Get();
}
inline void ReqEnterGameServer::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqEnterGameServer::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.account)
  return account_.Release();
}
inline void ReqEnterGameServer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.account)
}

// int32 game_id = 3;
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
}
inline int32_t ReqEnterGameServer::_internal_game_id() const {
  return game_id_;
}
inline int32_t ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.game_id)
  return _internal_game_id();
}
inline void ReqEnterGameServer::_internal_set_game_id(int32_t value) {
  
  game_id_ = value;
}
inline void ReqEnterGameServer::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.game_id)
}

// bytes name = 4;
inline void ReqEnterGameServer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqEnterGameServer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.name)
}
inline std::string* ReqEnterGameServer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.name)
  return _s;
}
inline const std::string& ReqEnterGameServer::_internal_name() const {
  return name_.Get();
}
inline void ReqEnterGameServer::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqEnterGameServer::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.name)
  return name_.Release();
}
inline void ReqEnterGameServer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.name)
}

// -------------------------------------------------------------------

// ReqAckEnterGameSuccess

// int32 arg = 1;
inline void ReqAckEnterGameSuccess::clear_arg() {
  arg_ = 0;
}
inline int32_t ReqAckEnterGameSuccess::_internal_arg() const {
  return arg_;
}
inline int32_t ReqAckEnterGameSuccess::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckEnterGameSuccess.arg)
  return _internal_arg();
}
inline void ReqAckEnterGameSuccess::_internal_set_arg(int32_t value) {
  
  arg_ = value;
}
inline void ReqAckEnterGameSuccess::set_arg(int32_t value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckEnterGameSuccess.arg)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// int32 arg = 1;
inline void ReqHeartBeat::clear_arg() {
  arg_ = 0;
}
inline int32_t ReqHeartBeat::_internal_arg() const {
  return arg_;
}
inline int32_t ReqHeartBeat::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqHeartBeat.arg)
  return _internal_arg();
}
inline void ReqHeartBeat::_internal_set_arg(int32_t value) {
  
  arg_ = value;
}
inline void ReqHeartBeat::set_arg(int32_t value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqHeartBeat.arg)
}

// -------------------------------------------------------------------

// ReqLeaveGameServer

// int32 arg = 1;
inline void ReqLeaveGameServer::clear_arg() {
  arg_ = 0;
}
inline int32_t ReqLeaveGameServer::_internal_arg() const {
  return arg_;
}
inline int32_t ReqLeaveGameServer::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqLeaveGameServer.arg)
  return _internal_arg();
}
inline void ReqLeaveGameServer::_internal_set_arg(int32_t value) {
  
  arg_ = value;
}
inline void ReqLeaveGameServer::set_arg(int32_t value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqLeaveGameServer.arg)
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// .NFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::_internal_has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != nullptr;
}
inline bool PlayerEntryInfo::has_object_guid() const {
  return _internal_has_object_guid();
}
inline const ::NFMsg::Ident& PlayerEntryInfo::_internal_object_guid() const {
  const ::NFMsg::Ident* p = object_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.object_guid)
  return _internal_object_guid();
}
inline void PlayerEntryInfo::unsafe_arena_set_allocated_object_guid(
    ::NFMsg::Ident* object_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  object_guid_ = object_guid;
  if (object_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PlayerEntryInfo.object_guid)
}
inline ::NFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  
  ::NFMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* PlayerEntryInfo::unsafe_arena_release_object_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.object_guid)
  
  ::NFMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* PlayerEntryInfo::_internal_mutable_object_guid() {
  
  if (object_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    object_guid_ = p;
  }
  return object_guid_;
}
inline ::NFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  ::NFMsg::Ident* _msg = _internal_mutable_object_guid();
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.object_guid)
  return _msg;
}
inline void PlayerEntryInfo::set_allocated_object_guid(::NFMsg::Ident* object_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid));
    if (message_arena != submessage_arena) {
      object_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.object_guid)
}

// float x = 2;
inline void PlayerEntryInfo::clear_x() {
  x_ = 0;
}
inline float PlayerEntryInfo::_internal_x() const {
  return x_;
}
inline float PlayerEntryInfo::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.x)
  return _internal_x();
}
inline void PlayerEntryInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerEntryInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.x)
}

// float y = 3;
inline void PlayerEntryInfo::clear_y() {
  y_ = 0;
}
inline float PlayerEntryInfo::_internal_y() const {
  return y_;
}
inline float PlayerEntryInfo::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.y)
  return _internal_y();
}
inline void PlayerEntryInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerEntryInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.y)
}

// float z = 4;
inline void PlayerEntryInfo::clear_z() {
  z_ = 0;
}
inline float PlayerEntryInfo::_internal_z() const {
  return z_;
}
inline float PlayerEntryInfo::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.z)
  return _internal_z();
}
inline void PlayerEntryInfo::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerEntryInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.z)
}

// int32 career_type = 5;
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
}
inline int32_t PlayerEntryInfo::_internal_career_type() const {
  return career_type_;
}
inline int32_t PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.career_type)
  return _internal_career_type();
}
inline void PlayerEntryInfo::_internal_set_career_type(int32_t value) {
  
  career_type_ = value;
}
inline void PlayerEntryInfo::set_career_type(int32_t value) {
  _internal_set_career_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.career_type)
}

// int32 player_state = 6;
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
}
inline int32_t PlayerEntryInfo::_internal_player_state() const {
  return player_state_;
}
inline int32_t PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.player_state)
  return _internal_player_state();
}
inline void PlayerEntryInfo::_internal_set_player_state(int32_t value) {
  
  player_state_ = value;
}
inline void PlayerEntryInfo::set_player_state(int32_t value) {
  _internal_set_player_state(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.player_state)
}

// bytes config_id = 7;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.config_id)
}
inline std::string* PlayerEntryInfo::mutable_config_id() {
  std::string* _s = _internal_mutable_config_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.config_id)
  return _s;
}
inline const std::string& PlayerEntryInfo::_internal_config_id() const {
  return config_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_config_id() {
  
  return config_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.config_id)
  return config_id_.Release();
}
inline void PlayerEntryInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(config_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (config_id_.IsDefault()) {
    config_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 8;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline int32_t PlayerEntryInfo::_internal_scene_id() const {
  return scene_id_;
}
inline int32_t PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.scene_id)
  return _internal_scene_id();
}
inline void PlayerEntryInfo::_internal_set_scene_id(int32_t value) {
  
  scene_id_ = value;
}
inline void PlayerEntryInfo::set_scene_id(int32_t value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 9;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.class_id)
  return _internal_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_class_id(ArgT0&& arg0, ArgT... args) {
 
 class_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.class_id)
}
inline std::string* PlayerEntryInfo::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.class_id)
  return _s;
}
inline const std::string& PlayerEntryInfo::_internal_class_id() const {
  return class_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_class_id(const std::string& value) {
  
  class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_class_id() {
  
  return class_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.class_id)
  return class_id_.Release();
}
inline void PlayerEntryInfo::set_allocated_class_id(std::string* class_id) {
  if (class_id != nullptr) {
    
  } else {
    
  }
  class_id_.SetAllocated(class_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_id_.IsDefault()) {
    class_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .NFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerEntryList::object_list_size() const {
  return _internal_object_list_size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerEntryList.object_list)
  return _internal_object_list(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  ::NFMsg::PlayerEntryInfo* _add = _internal_add_object_list();
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerEntryList.object_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .NFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerLeaveList::object_list_size() const {
  return _internal_object_list_size();
}
inline ::NFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerLeaveList.object_list)
  return _internal_object_list(index);
}
inline ::NFMsg::Ident* AckPlayerLeaveList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::NFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  ::NFMsg::Ident* _add = _internal_add_object_list();
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerLeaveList.object_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// PosSyncUnit

// .NFMsg.Ident mover = 1;
inline bool PosSyncUnit::_internal_has_mover() const {
  return this != internal_default_instance() && mover_ != nullptr;
}
inline bool PosSyncUnit::has_mover() const {
  return _internal_has_mover();
}
inline const ::NFMsg::Ident& PosSyncUnit::_internal_mover() const {
  const ::NFMsg::Ident* p = mover_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& PosSyncUnit::mover() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.mover)
  return _internal_mover();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_mover(
    ::NFMsg::Ident* mover) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mover_);
  }
  mover_ = mover;
  if (mover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PosSyncUnit.mover)
}
inline ::NFMsg::Ident* PosSyncUnit::release_mover() {
  
  ::NFMsg::Ident* temp = mover_;
  mover_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* PosSyncUnit::unsafe_arena_release_mover() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.mover)
  
  ::NFMsg::Ident* temp = mover_;
  mover_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* PosSyncUnit::_internal_mutable_mover() {
  
  if (mover_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    mover_ = p;
  }
  return mover_;
}
inline ::NFMsg::Ident* PosSyncUnit::mutable_mover() {
  ::NFMsg::Ident* _msg = _internal_mutable_mover();
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.mover)
  return _msg;
}
inline void PosSyncUnit::set_allocated_mover(::NFMsg::Ident* mover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mover_);
  }
  if (mover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mover));
    if (message_arena != submessage_arena) {
      mover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mover, submessage_arena);
    }
    
  } else {
    
  }
  mover_ = mover;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.mover)
}

// .NFMsg.Vector3 pos = 2;
inline bool PosSyncUnit::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PosSyncUnit::has_pos() const {
  return _internal_has_pos();
}
inline const ::NFMsg::Vector3& PosSyncUnit::_internal_pos() const {
  const ::NFMsg::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector3&>(
      ::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& PosSyncUnit::pos() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.pos)
  return _internal_pos();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_pos(
    ::NFMsg::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PosSyncUnit.pos)
}
inline ::NFMsg::Vector3* PosSyncUnit::release_pos() {
  
  ::NFMsg::Vector3* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.pos)
  
  ::NFMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::NFMsg::Vector3* PosSyncUnit::mutable_pos() {
  ::NFMsg::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.pos)
  return _msg;
}
inline void PosSyncUnit::set_allocated_pos(::NFMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.pos)
}

// .NFMsg.Vector3 orientation = 3;
inline bool PosSyncUnit::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool PosSyncUnit::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::NFMsg::Vector3& PosSyncUnit::_internal_orientation() const {
  const ::NFMsg::Vector3* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Vector3&>(
      ::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& PosSyncUnit::orientation() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.orientation)
  return _internal_orientation();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_orientation(
    ::NFMsg::Vector3* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.PosSyncUnit.orientation)
}
inline ::NFMsg::Vector3* PosSyncUnit::release_orientation() {
  
  ::NFMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.orientation)
  
  ::NFMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::NFMsg::Vector3* PosSyncUnit::mutable_orientation() {
  ::NFMsg::Vector3* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.orientation)
  return _msg;
}
inline void PosSyncUnit::set_allocated_orientation(::NFMsg::Vector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.orientation)
}

// int32 status = 4;
inline void PosSyncUnit::clear_status() {
  status_ = 0;
}
inline int32_t PosSyncUnit::_internal_status() const {
  return status_;
}
inline int32_t PosSyncUnit::status() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.status)
  return _internal_status();
}
inline void PosSyncUnit::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void PosSyncUnit::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NFMsg.PosSyncUnit.status)
}

// .NFMsg.PosSyncUnit.EMoveType type = 5;
inline void PosSyncUnit::clear_type() {
  type_ = 0;
}
inline ::NFMsg::PosSyncUnit_EMoveType PosSyncUnit::_internal_type() const {
  return static_cast< ::NFMsg::PosSyncUnit_EMoveType >(type_);
}
inline ::NFMsg::PosSyncUnit_EMoveType PosSyncUnit::type() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.type)
  return _internal_type();
}
inline void PosSyncUnit::_internal_set_type(::NFMsg::PosSyncUnit_EMoveType value) {
  
  type_ = value;
}
inline void PosSyncUnit::set_type(::NFMsg::PosSyncUnit_EMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.PosSyncUnit.type)
}

// -------------------------------------------------------------------

// ReqAckPlayerPosSync

// int32 sequence = 1;
inline void ReqAckPlayerPosSync::clear_sequence() {
  sequence_ = 0;
}
inline int32_t ReqAckPlayerPosSync::_internal_sequence() const {
  return sequence_;
}
inline int32_t ReqAckPlayerPosSync::sequence() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.sequence)
  return _internal_sequence();
}
inline void ReqAckPlayerPosSync::_internal_set_sequence(int32_t value) {
  
  sequence_ = value;
}
inline void ReqAckPlayerPosSync::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.sequence)
}

// repeated .NFMsg.PosSyncUnit sync_unit = 2;
inline int ReqAckPlayerPosSync::_internal_sync_unit_size() const {
  return sync_unit_.size();
}
inline int ReqAckPlayerPosSync::sync_unit_size() const {
  return _internal_sync_unit_size();
}
inline void ReqAckPlayerPosSync::clear_sync_unit() {
  sync_unit_.Clear();
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::mutable_sync_unit(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return sync_unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >*
ReqAckPlayerPosSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return &sync_unit_;
}
inline const ::NFMsg::PosSyncUnit& ReqAckPlayerPosSync::_internal_sync_unit(int index) const {
  return sync_unit_.Get(index);
}
inline const ::NFMsg::PosSyncUnit& ReqAckPlayerPosSync::sync_unit(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_sync_unit(index);
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::_internal_add_sync_unit() {
  return sync_unit_.Add();
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::add_sync_unit() {
  ::NFMsg::PosSyncUnit* _add = _internal_add_sync_unit();
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >&
ReqAckPlayerPosSync::sync_unit() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return sync_unit_;
}

// -------------------------------------------------------------------

// EffectData

// .NFMsg.Ident effect_ident = 1;
inline bool EffectData::_internal_has_effect_ident() const {
  return this != internal_default_instance() && effect_ident_ != nullptr;
}
inline bool EffectData::has_effect_ident() const {
  return _internal_has_effect_ident();
}
inline const ::NFMsg::Ident& EffectData::_internal_effect_ident() const {
  const ::NFMsg::Ident* p = effect_ident_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& EffectData::effect_ident() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_ident)
  return _internal_effect_ident();
}
inline void EffectData::unsafe_arena_set_allocated_effect_ident(
    ::NFMsg::Ident* effect_ident) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_ident_);
  }
  effect_ident_ = effect_ident;
  if (effect_ident) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.EffectData.effect_ident)
}
inline ::NFMsg::Ident* EffectData::release_effect_ident() {
  
  ::NFMsg::Ident* temp = effect_ident_;
  effect_ident_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* EffectData::unsafe_arena_release_effect_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.EffectData.effect_ident)
  
  ::NFMsg::Ident* temp = effect_ident_;
  effect_ident_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* EffectData::_internal_mutable_effect_ident() {
  
  if (effect_ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    effect_ident_ = p;
  }
  return effect_ident_;
}
inline ::NFMsg::Ident* EffectData::mutable_effect_ident() {
  ::NFMsg::Ident* _msg = _internal_mutable_effect_ident();
  // @@protoc_insertion_point(field_mutable:NFMsg.EffectData.effect_ident)
  return _msg;
}
inline void EffectData::set_allocated_effect_ident(::NFMsg::Ident* effect_ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_ident_);
  }
  if (effect_ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_ident));
    if (message_arena != submessage_arena) {
      effect_ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_ident, submessage_arena);
    }
    
  } else {
    
  }
  effect_ident_ = effect_ident;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.EffectData.effect_ident)
}

// int32 effect_value = 2;
inline void EffectData::clear_effect_value() {
  effect_value_ = 0;
}
inline int32_t EffectData::_internal_effect_value() const {
  return effect_value_;
}
inline int32_t EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_value)
  return _internal_effect_value();
}
inline void EffectData::_internal_set_effect_value(int32_t value) {
  
  effect_value_ = value;
}
inline void EffectData::set_effect_value(int32_t value) {
  _internal_set_effect_value(value);
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_value)
}

// .NFMsg.EffectData.EResultType effect_rlt = 3;
inline void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
}
inline ::NFMsg::EffectData_EResultType EffectData::_internal_effect_rlt() const {
  return static_cast< ::NFMsg::EffectData_EResultType >(effect_rlt_);
}
inline ::NFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_rlt)
  return _internal_effect_rlt();
}
inline void EffectData::_internal_set_effect_rlt(::NFMsg::EffectData_EResultType value) {
  
  effect_rlt_ = value;
}
inline void EffectData::set_effect_rlt(::NFMsg::EffectData_EResultType value) {
  _internal_set_effect_rlt(value);
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_rlt)
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// .NFMsg.Ident user = 1;
inline bool ReqAckUseSkill::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool ReqAckUseSkill::has_user() const {
  return _internal_has_user();
}
inline const ::NFMsg::Ident& ReqAckUseSkill::_internal_user() const {
  const ::NFMsg::Ident* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckUseSkill::user() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.user)
  return _internal_user();
}
inline void ReqAckUseSkill::unsafe_arena_set_allocated_user(
    ::NFMsg::Ident* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ReqAckUseSkill.user)
}
inline ::NFMsg::Ident* ReqAckUseSkill::release_user() {
  
  ::NFMsg::Ident* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseSkill::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.user)
  
  ::NFMsg::Ident* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseSkill::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::NFMsg::Ident* ReqAckUseSkill::mutable_user() {
  ::NFMsg::Ident* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.user)
  return _msg;
}
inline void ReqAckUseSkill::set_allocated_user(::NFMsg::Ident* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.user)
}

// bytes skill_id = 2;
inline void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmpty();
}
inline const std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckUseSkill::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 skill_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.skill_id)
}
inline std::string* ReqAckUseSkill::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.skill_id)
  return _s;
}
inline const std::string& ReqAckUseSkill::_internal_skill_id() const {
  return skill_id_.Get();
}
inline void ReqAckUseSkill::_internal_set_skill_id(const std::string& value) {
  
  skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqAckUseSkill::_internal_mutable_skill_id() {
  
  return skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.Release();
}
inline void ReqAckUseSkill::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (skill_id_.IsDefault()) {
    skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.skill_id)
}

// int32 client_index = 3;
inline void ReqAckUseSkill::clear_client_index() {
  client_index_ = 0;
}
inline int32_t ReqAckUseSkill::_internal_client_index() const {
  return client_index_;
}
inline int32_t ReqAckUseSkill::client_index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.client_index)
  return _internal_client_index();
}
inline void ReqAckUseSkill::_internal_set_client_index(int32_t value) {
  
  client_index_ = value;
}
inline void ReqAckUseSkill::set_client_index(int32_t value) {
  _internal_set_client_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.client_index)
}

// int64 server_index = 4;
inline void ReqAckUseSkill::clear_server_index() {
  server_index_ = int64_t{0};
}
inline int64_t ReqAckUseSkill::_internal_server_index() const {
  return server_index_;
}
inline int64_t ReqAckUseSkill::server_index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.server_index)
  return _internal_server_index();
}
inline void ReqAckUseSkill::_internal_set_server_index(int64_t value) {
  
  server_index_ = value;
}
inline void ReqAckUseSkill::set_server_index(int64_t value) {
  _internal_set_server_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.server_index)
}

// repeated .NFMsg.EffectData effect_data = 5;
inline int ReqAckUseSkill::_internal_effect_data_size() const {
  return effect_data_.size();
}
inline int ReqAckUseSkill::effect_data_size() const {
  return _internal_effect_data_size();
}
inline void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
inline ::NFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
inline const ::NFMsg::EffectData& ReqAckUseSkill::_internal_effect_data(int index) const {
  return effect_data_.Get(index);
}
inline const ::NFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.effect_data)
  return _internal_effect_data(index);
}
inline ::NFMsg::EffectData* ReqAckUseSkill::_internal_add_effect_data() {
  return effect_data_.Add();
}
inline ::NFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  ::NFMsg::EffectData* _add = _internal_add_effect_data();
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckUseSkill.effect_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// int32 transfer_type = 1;
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
}
inline int32_t ReqAckSwapScene::_internal_transfer_type() const {
  return transfer_type_;
}
inline int32_t ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.transfer_type)
  return _internal_transfer_type();
}
inline void ReqAckSwapScene::_internal_set_transfer_type(int32_t value) {
  
  transfer_type_ = value;
}
inline void ReqAckSwapScene::set_transfer_type(int32_t value) {
  _internal_set_transfer_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.transfer_type)
}

// int32 scene_id = 2;
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline int32_t ReqAckSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline int32_t ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.scene_id)
  return _internal_scene_id();
}
inline void ReqAckSwapScene::_internal_set_scene_id(int32_t value) {
  
  scene_id_ = value;
}
inline void ReqAckSwapScene::set_scene_id(int32_t value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.scene_id)
}

// int32 line_id = 3;
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
}
inline int32_t ReqAckSwapScene::_internal_line_id() const {
  return line_id_;
}
inline int32_t ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.line_id)
  return _internal_line_id();
}
inline void ReqAckSwapScene::_internal_set_line_id(int32_t value) {
  
  line_id_ = value;
}
inline void ReqAckSwapScene::set_line_id(int32_t value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.line_id)
}

// float x = 4;
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
}
inline float ReqAckSwapScene::_internal_x() const {
  return x_;
}
inline float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.x)
  return _internal_x();
}
inline void ReqAckSwapScene::_internal_set_x(float value) {
  
  x_ = value;
}
inline void ReqAckSwapScene::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.x)
}

// float y = 5;
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
}
inline float ReqAckSwapScene::_internal_y() const {
  return y_;
}
inline float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.y)
  return _internal_y();
}
inline void ReqAckSwapScene::_internal_set_y(float value) {
  
  y_ = value;
}
inline void ReqAckSwapScene::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.y)
}

// float z = 6;
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
}
inline float ReqAckSwapScene::_internal_z() const {
  return z_;
}
inline float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.z)
  return _internal_z();
}
inline void ReqAckSwapScene::_internal_set_z(float value) {
  
  z_ = value;
}
inline void ReqAckSwapScene::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.z)
}

// bytes data = 7;
inline void ReqAckSwapScene::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReqAckSwapScene::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckSwapScene::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.data)
}
inline std::string* ReqAckSwapScene::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSwapScene.data)
  return _s;
}
inline const std::string& ReqAckSwapScene::_internal_data() const {
  return data_.Get();
}
inline void ReqAckSwapScene::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqAckSwapScene::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqAckSwapScene::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSwapScene.data)
  return data_.Release();
}
inline void ReqAckSwapScene::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSwapScene.data)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .NFMsg.Ident player_id = 1;
inline bool ReqAckPlayerChat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAckPlayerChat::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::NFMsg::Ident&>(
      ::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.player_id)
  return _internal_player_id();
}
inline void ReqAckPlayerChat::unsafe_arena_set_allocated_player_id(
    ::NFMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NFMsg.ReqAckPlayerChat.player_id)
}
inline ::NFMsg::Ident* ReqAckPlayerChat::release_player_id() {
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::mutable_player_id() {
  ::NFMsg::Ident* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.player_id)
  return _msg;
}
inline void ReqAckPlayerChat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.player_id)
}

// bytes player_name = 2;
inline void ReqAckPlayerChat::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::player_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 player_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.player_name)
}
inline std::string* ReqAckPlayerChat::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.player_name)
  return _s;
}
inline const std::string& ReqAckPlayerChat::_internal_player_name() const {
  return player_name_.Get();
}
inline void ReqAckPlayerChat::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_player_name() {
  
  return player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_player_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.player_name)
  return player_name_.Release();
}
inline void ReqAckPlayerChat::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault()) {
    player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.player_name)
}

// .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
inline void ReqAckPlayerChat::clear_chat_channel() {
  chat_channel_ = 0;
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::_internal_chat_channel() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatChannel >(chat_channel_);
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::chat_channel() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_channel)
  return _internal_chat_channel();
}
inline void ReqAckPlayerChat::_internal_set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value) {
  
  chat_channel_ = value;
}
inline void ReqAckPlayerChat::set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value) {
  _internal_set_chat_channel(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_channel)
}

// .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::_internal_chat_type() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_type)
  return _internal_chat_type();
}
inline void ReqAckPlayerChat::_internal_set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
}
inline void ReqAckPlayerChat::set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 5;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_info)
  return _internal_chat_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_chat_info(ArgT0&& arg0, ArgT... args) {
 
 chat_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_info)
}
inline std::string* ReqAckPlayerChat::mutable_chat_info() {
  std::string* _s = _internal_mutable_chat_info();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.chat_info)
  return _s;
}
inline const std::string& ReqAckPlayerChat::_internal_chat_info() const {
  return chat_info_.Get();
}
inline void ReqAckPlayerChat::_internal_set_chat_info(const std::string& value) {
  
  chat_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_chat_info() {
  
  return chat_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.Release();
}
inline void ReqAckPlayerChat::set_allocated_chat_info(std::string* chat_info) {
  if (chat_info != nullptr) {
    
  } else {
    
  }
  chat_info_.SetAllocated(chat_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_info_.IsDefault()) {
    chat_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.chat_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFMsg::PosSyncUnit_EMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::PosSyncUnit_EMoveType>() {
  return ::NFMsg::PosSyncUnit_EMoveType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EffectData_EResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EffectData_EResultType>() {
  return ::NFMsg::EffectData_EResultType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_EGameChatChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatChannel>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatChannel_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_EGameChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto
